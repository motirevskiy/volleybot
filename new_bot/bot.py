import telebot
from new_bot.config import TOKEN
from new_bot.handlers import (
    register_admin_handlers,
    register_user_handlers,
    register_common_handlers
)
import threading
import time
from datetime import datetime
from new_bot.utils.scheduler import PaymentScheduler, ReserveScheduler, InvitationScheduler

def check_and_send_reminders(bot):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö"""
    while True:
        try:
            from new_bot.database.admin import AdminDB
            from new_bot.database.trainer import TrainerDB
            from new_bot.database.channel import ChannelDB
            
            admin_db = AdminDB()
            channel_db = ChannelDB()
            admins = admin_db.get_all_admins()
            
            for admin in admins:
                try:
                    admin_username = admin[0]
                    trainer_db = TrainerDB(admin_username)
                    trainings = trainer_db.get_all_trainings()
                    
                    for training in trainings:
                        if training.status != "OPEN":
                            continue
                            
                        time_until = training.date_time - datetime.now()
                        hours_until = time_until.total_seconds() / 3600
                        
                        # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                        participants = trainer_db.fetch_all('''
                            SELECT username 
                            FROM participants 
                            WHERE training_id = ? 
                            AND status = 'ACTIVE'
                        ''', (training.id,))
                        
                        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
                        group = channel_db.get_channel(training.channel_id)
                        if not group:
                            continue
                        
                        # –ó–∞ 24 —á–∞—Å–∞
                        if 23.9 <= hours_until <= 24.1:
                            for participant in participants:
                                username = participant[0]
                                if user_id := admin_db.get_user_id(username):
                                    notification = (
                                        "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞:\n\n"
                                        f"üë• –ì—Ä—É–ø–ø–∞: {group[1]}\n"
                                        f"üìÖ –î–∞—Ç–∞: {training.date_time.strftime('%d.%m.%Y %H:%M')}\n"
                                        f"üèãÔ∏è‚Äç‚ôÇÔ∏è –¢–∏–ø: {training.kind}\n"
                                        f"üìç –ú–µ—Å—Ç–æ: {training.location}"
                                    )
                                    try:
                                        bot.send_message(user_id, notification)
                                    except Exception as e:
                                        print(f"Error sending 24h reminder to {username}: {e}")
                        
                        # –ó–∞ 1 —á–∞—Å
                        if 0.9 <= hours_until <= 1.1:
                            for participant in participants:
                                username = participant[0]
                                if user_id := admin_db.get_user_id(username):
                                    notification = (
                                        "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ —á–µ—Ä–µ–∑ 1 —á–∞—Å:\n\n"
                                        f"üë• –ì—Ä—É–ø–ø–∞: {group[1]}\n"
                                        f"üìÖ –î–∞—Ç–∞: {training.date_time.strftime('%d.%m.%Y %H:%M')}\n"
                                        f"üèãÔ∏è‚Äç‚ôÇÔ∏è –¢–∏–ø: {training.kind}\n"
                                        f"üìç –ú–µ—Å—Ç–æ: {training.location}"
                                    )
                                    try:
                                        bot.send_message(user_id, notification)
                                    except Exception as e:
                                        print(f"Error sending 1h reminder to {username}: {e}")
                                        
                except Exception as e:
                    print(f"Error processing reminders for admin {admin_username}: {e}")
                    continue
                    
        except Exception as e:
            print(f"Error in reminder checker: {e}")
            
        time.sleep(660)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 8 –º–∏–Ω—É—Ç

def main():
    while True:
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
            bot = telebot.TeleBot(TOKEN)
            
            # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
            register_common_handlers(bot)
            register_admin_handlers(bot)
            register_user_handlers(bot)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏
            payment_scheduler = PaymentScheduler(bot)
            payment_scheduler.start()
            
            reserve_scheduler = ReserveScheduler(bot)
            reserve_scheduler.start()

            invitation_scheduler = InvitationScheduler(bot)
            invitation_scheduler.start()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
            reminder_thread = threading.Thread(target=check_and_send_reminders, args=(bot,))
            reminder_thread.daemon = True
            reminder_thread.start()
            
            # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
            bot.infinity_polling(timeout=60, long_polling_timeout=60)
        except Exception as e:
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            print("–ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
            time.sleep(5)
            continue

if __name__ == "__main__":
    main() 