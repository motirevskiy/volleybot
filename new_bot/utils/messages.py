from typing import Type, List, Tuple
from datetime import datetime
from new_bot.types import Training

def create_training_message(training: Training, admin_id: str) -> str:
    status_text = "–û—Ç–∫—Ä—ã—Ç–∞" if training.status == "OPEN" else "–ó–∞–∫—Ä—ã—Ç–∞"
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    from new_bot.database.trainer import TrainerDB
    trainer_db = TrainerDB(admin_id)
    current_participants = len(trainer_db.get_participants_by_training_id(training.id))
    
    return (
        f"- {training.date_time.strftime('%Y-%m-%d %H:%M')} | "
        f"{training.kind} | {training.duration} –º–∏–Ω—É—Ç | "
        f"{training.location} | "
        f"üí∞ {training.price}‚ÇΩ | "
        f"–£—á–∞—Å—Ç–Ω–∏–∫–∏: {current_participants}/{training.max_participants} | "
        f"–ó–∞–ø–∏—Å—å {status_text}\n"
    )

def create_schedule_message(trainings: List[Training], admins_map: dict) -> str:
    if not trainings:
        return "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"

    message = "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:\n"
    
    for training in trainings:
        message += f"- {training.date_time.strftime('%Y-%m-%d %H:%M')} | "
        message += f"{training.kind} | {training.duration} –º–∏–Ω—É—Ç | "
        message += f"{training.location} | "
        message += f"üí∞ {training.price}‚ÇΩ | "
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        from new_bot.database.trainer import TrainerDB
        trainer_db = TrainerDB(admins_map.get(training.id))
        current_participants = len(trainer_db.get_participants_by_training_id(training.id))
        message += f"–£—á–∞—Å—Ç–Ω–∏–∫–∏: {current_participants}/{training.max_participants} | "
        message += f"–ó–∞–ø–∏—Å—å {'–û—Ç–∫—Ä—ã—Ç–∞' if training.status == 'OPEN' else '–ó–∞–∫—Ä—ã—Ç–∞'}\n"
    
    return message

def create_open_training_message(admin_username: str, training: Training) -> str:
    from new_bot.database.trainer import TrainerDB
    from new_bot.database.admin import AdminDB
    trainer_db = TrainerDB(admin_username)
    admin_db = AdminDB()
    current_participants = len(trainer_db.get_participants_by_training_id(training.id))
    payment_details = admin_db.get_payment_details(admin_username)
    
    message = (
        f"–û—Ç–∫—Ä—ã—Ç–∞ –∑–∞–ø–∏—Å—å –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É —É @{admin_username}:\n"
        f"üìÖ –î–∞—Ç–∞: {training.date_time.strftime('%d.%m.%Y %H:%M')}\n"
        f"üèãÔ∏è‚Äç‚ôÇÔ∏è –¢–∏–ø: {training.kind}\n"
        f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {training.duration} –º–∏–Ω—É—Ç\n"
        f"üìç –ú–µ—Å—Ç–æ: {training.location}\n"
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {training.price}‚ÇΩ\n"
        f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏: {current_participants}/{training.max_participants}\n"
        f"\nüí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n{payment_details}"
    )
    return message

def format_participant(username: str, paid_status: int, number: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É —Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∏ —Å—Ç–∞—Ç—É—Å–æ–º –æ–ø–ª–∞—Ç—ã"""
    status_emoji = {
        1: "‚è≥",  # –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã
        2: "‚úÖ"   # –æ–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞
    }
    status = status_emoji.get(paid_status, "")  # –ï—Å–ª–∏ –Ω–µ—Ç –æ–ø–ª–∞—Ç—ã (0), —Ç–æ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
    return f"{number}. {status} @{username}" 