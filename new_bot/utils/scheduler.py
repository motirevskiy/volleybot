import threading
import time
from datetime import datetime, timedelta
from typing import Dict
from new_bot.database.trainer import TrainerDB
from new_bot.database.admin import AdminDB
from new_bot.database.channel import ChannelDB
from telebot import TeleBot

class InvitationScheduler:
    def __init__(self, bot: TeleBot):
        self.bot = bot
        self.admin_db = AdminDB()
        self.is_running = False
        self.thread = None
        
    def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        if not self.is_running:
            self.is_running = True
            self.thread = threading.Thread(target=self._run)
            self.thread.daemon = True  # –ü–æ—Ç–æ–∫ –±—É–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω –≤–º–µ—Å—Ç–µ —Å –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–æ–π
            self.thread.start()
            
    def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        self.is_running = False
        if self.thread:
            self.thread.join()
            
    def _run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π"""
        while self.is_running:
            try:
                self._check_expired_invites()
            except Exception as e:
                print(f"Error in invitation scheduler: {e}")
            time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            
    def _check_expired_invites(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è"""
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤
        admins = self.admin_db.get_all_admins()
        
        for admin in admins:
            admin_username = admin[0]
            trainer_db = TrainerDB(admin_username)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
            expired_invites = trainer_db.fetch_all('''
                SELECT username, training_id 
                FROM invites 
                WHERE status = 'PENDING'
                AND invite_timestamp < datetime('now', '-2 hours')
            ''')
            
            for invite in expired_invites:
                username, training_id = invite
                
                # –û—Ç–º–µ—á–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∫–∞–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω–æ–µ
                trainer_db.execute_query('''
                    UPDATE invites 
                    SET status = 'DECLINED' 
                    WHERE username = ? AND training_id = ?
                ''', (username, training_id))
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                user_id = self.admin_db.get_user_id(username)
                if user_id:
                    try:
                        training = trainer_db.get_training_details(training_id)
                        message = (
                            "‚åõÔ∏è –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –∏—Å—Ç–µ–∫:\n\n"
                            f"üìÖ –î–∞—Ç–∞: {training.date_time.strftime('%d.%m.%Y %H:%M')}\n"
                            f"üèãÔ∏è‚Äç‚ôÇÔ∏è –¢–∏–ø: {training.type}\n"
                            f"üìç –ú–µ—Å—Ç–æ: {training.location}"
                        )
                        self.bot.send_message(user_id, message)
                    except Exception as e:
                        print(f"Error sending notification to {username}: {e}") 

class PaymentScheduler:
    def __init__(self, bot: TeleBot):
        self.bot = bot
        self.admin_db = AdminDB()
        self.channel_db = ChannelDB()
        self.is_running = False
        self.thread = None
        
    def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        if not self.is_running:
            self.is_running = True
            self.thread = threading.Thread(target=self._run)
            self.thread.daemon = True
            self.thread.start()
            
    def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        self.is_running = False
        if self.thread:
            self.thread.join()
            
    def _run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç"""
        while self.is_running:
            try:
                self._check_payments()
            except Exception as e:
                print(f"Error in payment scheduler: {e}")
            time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            
    def _check_payments(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–ø–ª–∞—Ç—ã –∏ –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç –Ω–µ–æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö –≤ —Ä–µ–∑–µ—Ä–≤"""
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤
        admins = self.admin_db.get_all_admins()
        
        for admin in admins:
            admin_username = admin[0]
            payment_time_limit = self.admin_db.get_payment_time_limit(admin_username)
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞
            if payment_time_limit == 0:
                continue
                
            trainer_db = TrainerDB(admin_username)
            trainings = trainer_db.get_all_trainings()
            
            for training in trainings:
                if training.status != "OPEN":
                    continue
                    
                participants = trainer_db.get_participants_by_training_id(training.id)
                for username in participants:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è —Å –º–æ–º–µ–Ω—Ç–∞ –∑–∞–ø–∏—Å–∏
                    signup_time = trainer_db.get_signup_time(username, training.id)
                    if not signup_time:
                        continue
                        
                    time_passed = (datetime.now() - signup_time).total_seconds() / 60
                    if time_passed > payment_time_limit:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–ª–∞—Ç—É
                        if trainer_db.get_payment_status(username, training.id) != 2:
                            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
                            group = self.channel_db.get_channel(training.channel_id)
                            if not group:
                                continue
                                
                            # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤ —Ä–µ–∑–µ—Ä–≤
                            trainer_db.remove_participant(username, training.id)
                            position = trainer_db.add_to_reserve(username, training.id)
                            
                            # –£–≤–µ–¥–æ–º–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
                            if user_id := self.admin_db.get_user_id(username):
                                notification = (
                                    "‚ö†Ô∏è –í—ã –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã –≤ —Ä–µ–∑–µ—Ä–≤ –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –æ–ø–ª–∞—Ç—ã:\n\n"
                                    f"üë• –ì—Ä—É–ø–ø–∞: {group[1]}\n"
                                    f"üìÖ –î–∞—Ç–∞: {training.date_time.strftime('%d.%m.%Y %H:%M')}\n"
                                    f"üèãÔ∏è‚Äç‚ôÇÔ∏è –¢–∏–ø: {training.kind}\n"
                                    f"üìç –ú–µ—Å—Ç–æ: {training.location}\n"
                                    f"üìã –ü–æ–∑–∏—Ü–∏—è –≤ —Ä–µ–∑–µ—Ä–≤–µ: {position}"
                                )
                                try:
                                    self.bot.send_message(user_id, notification)
                                except Exception as e:
                                    print(f"Error notifying user {username}: {e}")
                            
                            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –º–µ—Å—Ç–æ —Å–ª–µ–¥—É—é—â–µ–º—É –≤ —Ä–µ–∑–µ—Ä–≤–µ
                            if next_username := trainer_db.offer_spot_to_next_in_reserve(training.id):
                                if user_id := self.admin_db.get_user_id(next_username):
                                    notification = (
                                        "üéâ –û—Å–≤–æ–±–æ–¥–∏–ª–æ—Å—å –º–µ—Å—Ç–æ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ!\n\n"
                                        f"üë• –ì—Ä—É–ø–ø–∞: {group[1]}\n"
                                        f"üìÖ –î–∞—Ç–∞: {training.date_time.strftime('%d.%m.%Y %H:%M')}\n"
                                        f"üèãÔ∏è‚Äç‚ôÇÔ∏è –¢–∏–ø: {training.kind}\n"
                                        f"üìç –ú–µ—Å—Ç–æ: {training.location}\n\n"
                                        "–£ –≤–∞—Å –µ—Å—Ç—å 2 —á–∞—Å–∞, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É—á–∞—Å—Ç–∏–µ"
                                    )
                                    try:
                                        self.bot.send_message(user_id, notification)
                                    except Exception as e:
                                        print(f"Error notifying reserve user {next_username}: {e}")
                            
                            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
                            if admin_id := self.admin_db.get_user_id(admin_username):
                                notification = (
                                    f"‚ÑπÔ∏è –£—á–∞—Å—Ç–Ω–∏–∫ @{username} –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ —Ä–µ–∑–µ—Ä–≤ –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –æ–ø–ª–∞—Ç—ã:\n\n"
                                    f"üë• –ì—Ä—É–ø–ø–∞: {group[1]}\n"
                                    f"üìÖ –î–∞—Ç–∞: {training.date_time.strftime('%d.%m.%Y %H:%M')}\n"
                                    f"üèãÔ∏è‚Äç‚ôÇÔ∏è –¢–∏–ø: {training.kind}"
                                )
                                try:
                                    self.bot.send_message(admin_id, notification)
                                except Exception as e:
                                    print(f"Error notifying admin {admin_username}: {e}")
                            
                            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤ —Ñ–æ—Ä—É–º–µ
                            if topic_id := trainer_db.get_topic_id(training.id):
                                from new_bot.utils.forum_manager import ForumManager
                                forum_manager = ForumManager(self.bot)
                                participants = trainer_db.get_participants_by_training_id(training.id)
                                forum_manager.update_participants_list(training, participants, topic_id, trainer_db) 