import threading
import time
from datetime import datetime, timedelta
from typing import Dict
from new_bot.database.trainer import TrainerDB
from new_bot.database.admin import AdminDB
from new_bot.database.channel import ChannelDB
from telebot import TeleBot
from new_bot.utils.reserve import offer_spot_to_reserve

class InvitationScheduler:
    def __init__(self, bot: TeleBot):
        self.bot = bot
        self.admin_db = AdminDB()
        self.is_running = False
        self.thread = None
        
    def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        if not self.is_running:
            self.is_running = True
            self.thread = threading.Thread(target=self._run)
            self.thread.daemon = True  # –ü–æ—Ç–æ–∫ –±—É–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω –≤–º–µ—Å—Ç–µ —Å –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–æ–π
            self.thread.start()
            
    def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        self.is_running = False
        if self.thread:
            self.thread.join()
            
    def _run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π"""
        while self.is_running:
            try:
                self._check_expired_invites()
            except Exception as e:
                print(f"Error in invitation scheduler: {e}")
            time.sleep(10)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            
    def _check_expired_invites(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è"""
        admins = self.admin_db.get_all_admins()
        
        for admin in admins:
            admin_username = admin[0]
            trainer_db = TrainerDB(admin_username)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è (–±–æ–ª—å—à–µ 1 —á–∞—Å–∞)
            expired_invites = trainer_db.fetch_all('''
                SELECT username, training_id 
                FROM invites 
                WHERE status = 'PENDING'
                AND invite_timestamp < datetime('now', '+3 hours', '-2 hour')
            ''')
            
            for invite in expired_invites:
                username, training_id = invite
                
                # –û—Ç–º–µ—á–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∫–∞–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω–æ–µ
                trainer_db.execute_query('''
                    UPDATE invites 
                    SET status = 'DECLINED' 
                    WHERE username = ? AND training_id = ?
                ''', (username, training_id))

                trainer_db.remove_participant(username, training_id)
                trainer_db.remove_from_reserve(username, training_id)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                if user_id := self.admin_db.get_user_id(username):
                    training = trainer_db.get_training_details(training_id)
                    if training:
                        notification = (
                            "‚åõÔ∏è –í—Ä–µ–º—è –Ω–∞ –ø—Ä–∏–Ω—è—Ç–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ:\n\n"
                            f"üìÖ –î–∞—Ç–∞: {training.date_time.strftime('%d.%m.%Y %H:%M')}\n"
                            f"üèãÔ∏è‚Äç‚ôÇÔ∏è –¢–∏–ø: {training.kind}\n"
                            f"üìç –ú–µ—Å—Ç–æ: {training.location}"
                        )
                        try:
                            self.bot.send_message(user_id, notification)
                        except Exception as e:
                            print(f"Error notifying user {username}: {e}")
                            
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤ —Ñ–æ—Ä—É–º–µ
                        if topic_id := trainer_db.get_topic_id(training_id):
                            from new_bot.utils.forum_manager import ForumManager
                            forum_manager = ForumManager(self.bot)
                            participants = trainer_db.get_participants_by_training_id(training_id)
                            forum_manager.update_participants_list(training, participants, topic_id, trainer_db)

class PaymentScheduler:
    def __init__(self, bot: TeleBot):
        self.bot = bot
        self.admin_db = AdminDB()
        self.channel_db = ChannelDB()
        self.is_running = False
        self.thread = None
        
    def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        if not self.is_running:
            self.is_running = True
            self.thread = threading.Thread(target=self._run)
            self.thread.daemon = True
            self.thread.start()
            
    def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        self.is_running = False
        if self.thread:
            self.thread.join()
            
    def _run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç"""
        while self.is_running:
            try:
                self._check_payments()
            except Exception as e:
                print(f"Error in payment scheduler: {e}")
            time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            
    def _check_payments(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–ø–ª–∞—Ç—ã –∏ –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç –Ω–µ–æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö –≤ —Ä–µ–∑–µ—Ä–≤"""
        admins = self.admin_db.get_all_admins()
        
        for admin in admins:
            admin_username = admin[0]
            payment_time_limit = self.admin_db.get_payment_time_limit(admin_username)
            print(payment_time_limit)
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞
            if payment_time_limit == 0:
                continue
                
            trainer_db = TrainerDB(admin_username)
            trainings = trainer_db.get_all_trainings()
            
            for training in trainings:
                if training.status != "OPEN":
                    continue
                    
                # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–Ω–µ RESERVE_PENDING)
                participants = trainer_db.fetch_all('''
                    SELECT username 
                    FROM participants 
                    WHERE training_id = ? 
                    AND status = 'ACTIVE'
                ''', (training.id,))
                
                for participant in participants:
                    username = participant[0]
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è —Å –º–æ–º–µ–Ω—Ç–∞ –∑–∞–ø–∏—Å–∏
                    signup_time = trainer_db.get_signup_time(username, training.id)
                    print(signup_time)
                    if not signup_time:
                        continue
                        
                    time_passed = (datetime.now() - signup_time).total_seconds() / 60
                    print(time_passed)
                    if time_passed > payment_time_limit:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–ª–∞—Ç—É
                        if trainer_db.get_payment_status(username, training.id) != 2:
                            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
                            group = self.channel_db.get_channel(training.channel_id)
                            if not group:
                                continue
                                
                            # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤ —Ä–µ–∑–µ—Ä–≤
                            trainer_db.remove_participant(username, training.id)
                            position = trainer_db.add_to_reserve(username, training.id)
                            
                            # –£–≤–µ–¥–æ–º–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
                            if user_id := self.admin_db.get_user_id(username):
                                notification = (
                                    "‚ö†Ô∏è –í—ã –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã –≤ —Ä–µ–∑–µ—Ä–≤ –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –æ–ø–ª–∞—Ç—ã:\n\n"
                                    f"üë• –ì—Ä—É–ø–ø–∞: {group[1]}\n"
                                    f"üìÖ –î–∞—Ç–∞: {training.date_time.strftime('%d.%m.%Y %H:%M')}\n"
                                    f"üèãÔ∏è‚Äç‚ôÇÔ∏è –¢–∏–ø: {training.kind}\n"
                                    f"üìç –ú–µ—Å—Ç–æ: {training.location}\n"
                                    f"üìã –ü–æ–∑–∏—Ü–∏—è –≤ —Ä–µ–∑–µ—Ä–≤–µ: {position}\n\n"
                                    f"–í—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É: {payment_time_limit/60} —á–∞—Å–æ–≤"
                                )
                                try:
                                    self.bot.send_message(user_id, notification)
                                except Exception as e:
                                    print(f"Error notifying user {username}: {e}")
                            
                            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –º–µ—Å—Ç–æ —Å–ª–µ–¥—É—é—â–µ–º—É –≤ —Ä–µ–∑–µ—Ä–≤–µ
                            offer_spot_to_reserve(training.id, admin_username, self.bot)
                            
                            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
                            if admin_id := self.admin_db.get_user_id(admin_username):
                                notification = (
                                    f"‚ÑπÔ∏è –£—á–∞—Å—Ç–Ω–∏–∫ @{username} –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ —Ä–µ–∑–µ—Ä–≤ –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –æ–ø–ª–∞—Ç—ã:\n\n"
                                    f"üë• –ì—Ä—É–ø–ø–∞: {group[1]}\n"
                                    f"üìÖ –î–∞—Ç–∞: {training.date_time.strftime('%d.%m.%Y %H:%M')}\n"
                                    f"üèãÔ∏è‚Äç‚ôÇÔ∏è –¢–∏–ø: {training.kind}"
                                )
                                try:
                                    self.bot.send_message(admin_id, notification)
                                except Exception as e:
                                    print(f"Error notifying admin {admin_username}: {e}")
                            
                            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤ —Ñ–æ—Ä—É–º–µ
                            if topic_id := trainer_db.get_topic_id(training.id):
                                from new_bot.utils.forum_manager import ForumManager
                                forum_manager = ForumManager(self.bot)
                                participants = trainer_db.get_participants_by_training_id(training.id)
                                forum_manager.update_participants_list(training, participants, topic_id, trainer_db) 

class ReserveScheduler:
    def __init__(self, bot: TeleBot):
        self.bot = bot
        self.admin_db = AdminDB()
        self.channel_db = ChannelDB()
        self.is_running = False
        self.thread = None
        
    def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        if not self.is_running:
            self.is_running = True
            self.thread = threading.Thread(target=self._run)
            self.thread.daemon = True
            self.thread.start()
            
    def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        self.is_running = False
        if self.thread:
            self.thread.join()
            
    def _run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∑–µ—Ä–≤–∞"""
        while self.is_running:
            try:
                self._check_expired_offers()
            except Exception as e:
                print(f"Error in reserve scheduler: {e}")
            time.sleep(10)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
            
    def _check_expired_offers(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–∑ —Ä–µ–∑–µ—Ä–≤–∞"""
        admins = self.admin_db.get_all_admins()
        
        for admin in admins:
            admin_username = admin[0]
            trainer_db = TrainerDB(admin_username)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (–±–æ–ª—å—à–µ 2 —á–∞—Å–æ–≤)
            expired_offers = trainer_db.fetch_all('''
                SELECT username, training_id, signup_time 
                FROM participants 
                WHERE status = 'RESERVE_PENDING'
                AND signup_time < datetime('now', '+3 hours', '-2 hours')
            ''')
            
            for offer in expired_offers:
                username, training_id, signup_time = offer
                print(f"Processing expired offer: user={username}, training={training_id}, signup_time={signup_time}")
                
                # –£–¥–∞–ª—è–µ–º –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
                trainer_db.execute_query(
                    "DELETE FROM participants WHERE username = ? AND training_id = ? AND status = 'RESERVE_PENDING'",
                    (username, training_id)
                )
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü —Ä–µ–∑–µ—Ä–≤–∞ —Å –Ω–æ–≤—ã–º —Å—Ç–∞—Ç—É—Å–æ–º WAITING
                position = trainer_db.add_to_reserve(username, training_id)
                print(f"Added {username} back to reserve at position {position}")
                
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤ —Ä–µ–∑–µ—Ä–≤–µ –Ω–∞ WAITING
                trainer_db.execute_query('''
                    UPDATE reserve 
                    SET status = 'WAITING' 
                    WHERE username = ? AND training_id = ?
                ''', (username, training_id))
                
                # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –º–µ—Å—Ç–æ —Å–ª–µ–¥—É—é—â–µ–º—É
                offer_spot_to_reserve(training_id, admin_username, self.bot)
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if user_id := self.admin_db.get_user_id(username):
                    training = trainer_db.get_training_details(training_id)
                    if training:
                        notification = (
                            "‚åõÔ∏è –í—Ä–µ–º—è –Ω–∞ –ø—Ä–∏–Ω—è—Ç–∏–µ –º–µ—Å—Ç–∞ –∏—Å—Ç–µ–∫–ª–æ:\n\n"
                            f"üìÖ –î–∞—Ç–∞: {training.date_time.strftime('%d.%m.%Y %H:%M')}\n"
                            f"üèãÔ∏è‚Äç‚ôÇÔ∏è –¢–∏–ø: {training.kind}\n"
                            f"üìç –ú–µ—Å—Ç–æ: {training.location}\n\n"
                            f"–í—ã –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã –Ω–∞ –ø–æ–∑–∏—Ü–∏—é {position} –≤ —Å–ø–∏—Å–∫–µ —Ä–µ–∑–µ—Ä–≤–∞"
                        )
                        try:
                            self.bot.send_message(user_id, notification)
                            print(f"Sent notification to {username}")
                        except Exception as e:
                            print(f"Error notifying user {username}: {e}") 

class ReminderScheduler:
    def __init__(self, bot: TeleBot):
        self.bot = bot
        self.admin_db = AdminDB()
        self.channel_db = ChannelDB()
        self.is_running = False
        self.thread = None
        
    def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        if not self.is_running:
            self.is_running = True
            self.thread = threading.Thread(target=self._run)
            self.thread.daemon = True
            self.thread.start()
            
    def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        self.is_running = False
        if self.thread:
            self.thread.join()
            
    def _run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        while self.is_running:
            try:
                self._check_and_send_reminders()
            except Exception as e:
                print(f"Error in reminder scheduler: {e}")
            time.sleep(660)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 8 –º–∏–Ω—É—Ç
            
    def _check_and_send_reminders(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö"""
        admins = self.admin_db.get_all_admins()
        
        for admin in admins:
            try:
                admin_username = admin[0]
                trainer_db = TrainerDB(admin_username)
                trainings = trainer_db.get_all_trainings()
                
                for training in trainings:
                    if training.status != "OPEN":
                        continue
                        
                    time_until = training.date_time - datetime.now()
                    hours_until = time_until.total_seconds() / 3600
                    
                    # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                    participants = trainer_db.fetch_all('''
                        SELECT username 
                        FROM participants 
                        WHERE training_id = ? 
                        AND status = 'ACTIVE'
                    ''', (training.id,))
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
                    group = self.channel_db.get_channel(training.channel_id)
                    if not group:
                        continue
                    
                    # –ó–∞ 24 —á–∞—Å–∞
                    if 23.9 <= hours_until <= 24.1:
                        for participant in participants:
                            username = participant[0]
                            if user_id := self.admin_db.get_user_id(username):
                                notification = (
                                    "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞:\n\n"
                                    f"üë• –ì—Ä—É–ø–ø–∞: {group[1]}\n"
                                    f"üìÖ –î–∞—Ç–∞: {training.date_time.strftime('%d.%m.%Y %H:%M')}\n"
                                    f"üèãÔ∏è‚Äç‚ôÇÔ∏è –¢–∏–ø: {training.kind}\n"
                                    f"üìç –ú–µ—Å—Ç–æ: {training.location}"
                                )
                                try:
                                    self.bot.send_message(user_id, notification)
                                except Exception as e:
                                    print(f"Error sending 24h reminder to {username}: {e}")
                    
                    # –ó–∞ 1 —á–∞—Å
                    if 0.9 <= hours_until <= 1.1:
                        for participant in participants:
                            username = participant[0]
                            if user_id := self.admin_db.get_user_id(username):
                                notification = (
                                    "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ —á–µ—Ä–µ–∑ 1 —á–∞—Å:\n\n"
                                    f"üë• –ì—Ä—É–ø–ø–∞: {group[1]}\n"
                                    f"üìÖ –î–∞—Ç–∞: {training.date_time.strftime('%d.%m.%Y %H:%M')}\n"
                                    f"üèãÔ∏è‚Äç‚ôÇÔ∏è –¢–∏–ø: {training.kind}\n"
                                    f"üìç –ú–µ—Å—Ç–æ: {training.location}"
                                )
                                try:
                                    self.bot.send_message(user_id, notification)
                                except Exception as e:
                                    print(f"Error sending 1h reminder to {username}: {e}")
                                    
            except Exception as e:
                print(f"Error processing reminders for admin {admin_username}: {e}")
                continue 