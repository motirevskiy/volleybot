import threading
import schedule
import time
from telebot.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, Message
from new_bot.database.admin import AdminDB
from new_bot.database.trainer import TrainerDB
from new_bot.database.channel import ChannelDB
from new_bot.utils.messages import create_schedule_message
from new_bot.utils.keyboards import get_trainings_keyboard
from new_bot.types import Training, BotType
from typing import List, Tuple, Optional
from new_bot.utils.forum_manager import ForumManager
from datetime import datetime, timedelta
from new_bot.utils.reserve import offer_spot_to_reserve

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
admin_db = AdminDB()
channel_db = ChannelDB()

def find_training_admin(training_id: int) -> Optional[str]:
    """–ù–∞—Ö–æ–¥–∏—Ç –∞–¥–º–∏–Ω–∞, —Å–æ–∑–¥–∞–≤—à–µ–≥–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É"""
    for admin in admin_db.get_all_admins():
        trainer_db = TrainerDB(admin[0])
        if trainer_db.get_training_details(training_id):
            return admin[0]
    return None

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏
def cancel_training_handler(call: CallbackQuery, bot: BotType, forum_manager: ForumManager):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É"""
    try:
        parts = call.data.split("_")
        admin_username = parts[1]
        training_id = int(parts[2])
        username = call.from_user.username

        bot.delete_message(call.message.chat.id, call.message.message_id)

        
        if not username:
            bot.send_message(call.message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à username.")
            return
        
        trainer_db = TrainerDB(admin_username)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if not trainer_db.is_participant(username, training_id):
            bot.answer_callback_query(call.id, "–í—ã –Ω–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É.")
            return

        # –£–¥–∞–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
        if trainer_db.remove_participant(username, training_id):
            bot.send_message(call.message.chat.id, "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏ –∑–∞–ø–∏—Å—å –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É")
            
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –º–µ—Å—Ç–æ —Å–ª–µ–¥—É—é—â–µ–º—É –≤ —Ä–µ–∑–µ—Ä–≤–µ
            offer_spot_to_reserve(training_id, admin_username, bot)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤ —Ç–µ–º–µ
            if topic_id := trainer_db.get_topic_id(training_id):
                training = trainer_db.get_training_details(training_id)
                participants = trainer_db.get_participants_by_training_id(training_id)
                forum_manager.update_participants_list(training, participants, topic_id, trainer_db)
        else:
            bot.send_message(call.message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å")
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: {e}")
        print(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–π callback_data: {call.data}")
        bot.send_message(call.message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏")

def register_user_handlers(bot: BotType) -> None:
    forum_manager = ForumManager(bot)

    def check_pending_invites():
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —É–¥–∞–ª—è–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è"""
        for admin in admin_db.get_all_admins():
            trainer_db = TrainerDB(admin[0])
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å—Ç–µ–∫–ª–∏
            expired_invites = trainer_db.fetch_all('''
                SELECT username, training_id, invite_timestamp 
                FROM invites 
                WHERE status = 'PENDING' 
                AND invite_timestamp < datetime('now', '-1 hour')
                AND NOT EXISTS (
                    SELECT 1 FROM invites i2 
                    WHERE i2.username = invites.username 
                    AND i2.training_id = invites.training_id 
                    AND i2.status IN ('ACCEPTED', 'DECLINED')
                )
            ''')
            
            for invite in expired_invites:
                username, training_id = invite[0], invite[1]
                # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞/—Ä–µ–∑–µ—Ä–≤–∞ –∏ –∏–Ω–≤–∞–π—Ç
                trainer_db.remove_participant(username, training_id)
                trainer_db.remove_from_reserve(username, training_id)
                trainer_db.remove_invite(username, training_id)
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if friend_id := admin_db.get_user_id(username):
                    bot.send_message(
                        friend_id,
                        "‚ùå –í—Ä–µ–º—è –Ω–∞ –ø—Ä–∏–Ω—è—Ç–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –í—ã —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–ø–∏—Å–∫–∞."
                    )
                    
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤ —Ñ–æ—Ä—É–º–µ
                if topic_id := trainer_db.get_topic_id(training_id):
                    training = trainer_db.get_training_details(training_id)
                    participants = trainer_db.get_participants_by_training_id(training_id)
                    forum_manager.update_participants_list(training, participants, topic_id, trainer_db)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    schedule.every(30).seconds.do(check_pending_invites)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    def run_scheduler():
        while True:
            schedule.run_pending()
            time.sleep(1)

    threading.Thread(target=run_scheduler, daemon=True).start()

    def process_friend_invite(message: Message, training_id: int, admin_username: str):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥—Ä—É–≥–∞"""
        usernames = [username.strip().lstrip('@') for username in message.text.split()]
        success_invites = []
        failed_invites = []
        
        trainer_db = TrainerDB(admin_username)
        training = trainer_db.get_training_details(training_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
        group = channel_db.get_channel(training.channel_id)
        if not group:
            bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞: –≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        for friend_username in usernames:
            print(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {friend_username}")  # –û—Ç–ª–∞–¥–∫–∞
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            friend_id = admin_db.get_user_id(friend_username)
            print(f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {friend_id}")  # –û—Ç–ª–∞–¥–∫–∞
            
            if not friend_id:
                print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {friend_username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ")  # –û—Ç–ª–∞–¥–∫–∞
                failed_invites.append(f"@{friend_username} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω)")
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø–∏—Å–∞–Ω –ª–∏ —É–∂–µ
            if trainer_db.is_participant(friend_username, training_id):
                failed_invites.append(f"@{friend_username} (—É–∂–µ –∑–∞–ø–∏—Å–∞–Ω)")
                continue
            
            if trainer_db.add_invite(friend_username, admin_username, training_id):
                # –°—Ä–∞–∑—É –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫/—Ä–µ–∑–µ—Ä–≤ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                is_main_list = trainer_db.add_participant(friend_username, training_id)
                if not is_main_list:
                    position = trainer_db.add_to_reserve(friend_username, training_id)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
                markup = InlineKeyboardMarkup()
                markup.row(
                    InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_invite_{training_id}"),
                    InlineKeyboardButton("‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è", callback_data=f"decline_invite_{training_id}")
                )
                
                notification = (
                    f"üéü @{admin_username} –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç –≤–∞—Å –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É!\n\n"
                    f"üë• –ì—Ä—É–ø–ø–∞: {group[1]}\n"
                    f"üìÖ –î–∞—Ç–∞: {training.date_time.strftime('%d.%m.%Y %H:%M')}\n"
                    f"üèãÔ∏è‚Äç‚ôÇÔ∏è –¢–∏–ø: {training.kind}\n"
                    f"üìç –ú–µ—Å—Ç–æ: {training.location}\n\n"
                    "–£ –≤–∞—Å –µ—Å—Ç—å 2 —á–∞—Å–∞, —á—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ"
                )
                
                bot.send_message(friend_id, notification, reply_markup=markup)
                success_invites.append(f"@{friend_username}")
            else:
                failed_invites.append(f"@{friend_username} (–æ—à–∏–±–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è)")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤ —Ñ–æ—Ä—É–º–µ
            if topic_id := trainer_db.get_topic_id(training_id):
                training = trainer_db.get_training_details(training_id)
                participants = trainer_db.get_participants_by_training_id(training_id)
                forum_manager.update_participants_list(training, participants, topic_id, trainer_db)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        result_message = []
        if success_invites:
            result_message.append("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω—ã:\n" + "\n".join(success_invites))
        if failed_invites:
            result_message.append("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å:\n" + "\n".join(failed_invites))
        
        bot.reply_to(message, "\n\n".join(result_message))

    @bot.callback_query_handler(func=lambda call: call.data == "get_schedule")
    def get_schedule(call: CallbackQuery):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø"""
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≥—Ä—É–ø–ø
        groups = channel_db.get_all_channels()
        if not groups:
            bot.send_message(call.message.chat.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏")
            return

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≥—Ä—É–ø–ø–∞–º–∏
        markup = InlineKeyboardMarkup()
        for group_id, title in groups:
            markup.add(InlineKeyboardButton(
                title,
                callback_data=f"schedule_group_{group_id}"
            ))

        bot.send_message(
            call.message.chat.id,
            "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:",
            reply_markup=markup
        )

    @bot.callback_query_handler(func=lambda call: call.data.startswith("schedule_group_"))
    def show_group_schedule(call: CallbackQuery):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã"""
        group_id = int(call.data.split("_")[2])
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
        group = channel_db.get_channel(group_id)
        if not group:
            bot.answer_callback_query(call.id, "–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≥—Ä—É–ø–ø—ã
        admins = admin_db.get_channel_admins(group_id)
        
        all_trainings = []
        for admin in admins:
            trainer_db = TrainerDB(admin)
            trainings = trainer_db.get_trainings_for_channel(group_id)
            all_trainings.extend(trainings)

        if not all_trainings:
            bot.send_message(
                call.message.chat.id,
                f"–í –≥—Ä—É–ø–ø–µ {group[1]} –ø–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"
            )
            return

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø–æ –¥–∞—Ç–µ
        all_trainings.sort(key=lambda x: x.date_time)
        
        message = f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≥—Ä—É–ø–ø—ã {group[1]}:\n\n"
        for training in all_trainings:
            message += (
                f"üìÖ {training.date_time.strftime('%d.%m.%Y %H:%M')}\n"
                f"üèãÔ∏è‚Äç‚ôÇÔ∏è {training.kind}\n"
                f"‚è± {training.duration} –º–∏–Ω—É—Ç\n"
                f"üìç {training.location}\n"
                f"üí∞ {training.price}‚ÇΩ\n"
                f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏: {len(trainer_db.get_participants_by_training_id(training.id))}/{training.max_participants}\n"
                f"üìù –°—Ç–∞—Ç—É—Å: {'–û—Ç–∫—Ä—ã—Ç–∞' if training.status == 'OPEN' else '–ó–∞–∫—Ä—ã—Ç–∞'}\n"
                "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
            )

        bot.send_message(call.message.chat.id, message)

    @bot.callback_query_handler(func=lambda call: call.data == "sign_up_training")
    def show_groups_for_signup(call: CallbackQuery):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É"""
        groups = channel_db.get_all_channels()
        if not groups:
            bot.send_message(call.message.chat.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏")
            return

        markup = InlineKeyboardMarkup()
        for group_id, title in groups:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—Ç–∫—Ä—ã—Ç—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –≥—Ä—É–ø–ø–µ
            has_open_trainings = False
            admins = admin_db.get_channel_admins(group_id)
            for admin in admins:
                trainer_db = TrainerDB(admin)
                trainings = trainer_db.get_trainings_for_channel(group_id)
                if any(t.status == "OPEN" for t in trainings):
                    has_open_trainings = True
                    break

            if has_open_trainings:
                markup.add(InlineKeyboardButton(
                    title,
                    callback_data=f"signup_group_{group_id}"
                ))

        if not markup.keyboard:
            bot.send_message(call.message.chat.id, "–ù–µ—Ç –≥—Ä—É–ø–ø —Å –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏")
            return

        bot.send_message(
            call.message.chat.id,
            "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É:",
            reply_markup=markup
        )

    @bot.callback_query_handler(func=lambda call: call.data.startswith("signup_group_"))
    def show_group_trainings_for_signup(call: CallbackQuery):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ"""
        group_id = int(call.data.split("_")[2])
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
        group = channel_db.get_channel(group_id)
        if not group:
            bot.answer_callback_query(call.id, "–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –¥–ª—è –≥—Ä—É–ø–ø—ã
        open_trainings = []
        admins = admin_db.get_channel_admins(group_id)
        
        for admin in admins:
            trainer_db = TrainerDB(admin)
            trainings = trainer_db.get_trainings_for_channel(group_id)
            for training in trainings:
                if training.status == "OPEN":
                    open_trainings.append((training, admin))
        
        if not open_trainings:
            bot.send_message(
                call.message.chat.id,
                f"–í –≥—Ä—É–ø–ø–µ {group[1]} –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏
        markup = InlineKeyboardMarkup()
        for training, admin in open_trainings:
            participants = trainer_db.get_participants_by_training_id(training.id)
            button_text = (
                f"{training.date_time.strftime('%d.%m %H:%M')} | "
                f"{training.kind} | "
                f"{len(participants)}/{training.max_participants}"
            )
            markup.add(InlineKeyboardButton(
                button_text,
                callback_data=f"signup_training_{admin}_{training.id}"
            ))
        
        bot.edit_message_text(
            f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –≥—Ä—É–ø–ø–µ {group[1]}:",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup
        )

    @bot.callback_query_handler(func=lambda call: call.data.startswith("signup_training_"))
    def process_training_signup(call: CallbackQuery):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø–∏—Å—å –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É"""
        parts = call.data.split("_")
        admin_username = parts[2]
        training_id = int(parts[3])
        
        # –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø–∏—Å–∏...

    @bot.callback_query_handler(func=lambda call: call.data == "cancel_message_sign_up")
    def cancel_message_sign_up(call: CallbackQuery) -> None:
        user_id = call.from_user.id
        admin_db.execute_query("DELETE FROM users WHERE user_id = ?", (user_id,))
        bot.send_message(call.message.chat.id, "–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–Ω—ã –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏.")

    @bot.callback_query_handler(func=lambda call: call.data.startswith("cancel_") and len(call.data.split("_")) == 3)
    def cancel_training(call: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É"""
        cancel_training_handler(call, bot, forum_manager)

    @bot.callback_query_handler(func=lambda call: call.data == "my_trainings")
    def show_user_trainings(call: CallbackQuery):
        username = call.from_user.username
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≥—Ä—É–ø–ø—ã
        groups = channel_db.get_all_channels()
        all_trainings = []
        all_reserve_trainings = []
        
        for group in groups:
            group_id, group_title = group
            admins = admin_db.get_channel_admins(group_id)
            
            for admin in admins:
                trainer_db = TrainerDB(admin)
                
                # –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏
                trainings = trainer_db.get_trainings_for_channel(group_id)
                for training in trainings:
                    if trainer_db.is_participant(username, training.id):
                        all_trainings.append((group_title, admin, training))
                
                # –ó–∞–ø–∏—Å–∏ –≤ —Ä–µ–∑–µ—Ä–≤–µ
                reserve = trainer_db.fetch_all('''
                    SELECT s.training_id, s.date_time, s.duration, 
                    s.kind, s.location, s.status, s.max_participants, 
                    r.position, r.status
                    FROM schedule s
                    JOIN reserve r ON s.training_id = r.training_id
                    WHERE r.username = ? AND s.channel_id = ?
                ''', (username, group_id))
                
                for r in reserve:
                    training = Training.from_db_row(r[1:7])
                    training.id = r[0]
                    training.channel_id = group_id
                    all_reserve_trainings.append((group_title, admin, training, r[7], r[8]))
        
        if not all_trainings and not all_reserve_trainings:
            bot.send_message(call.message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
        if all_trainings:
            bot.send_message(call.message.chat.id, "–í–∞—à–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:")
            for group_title, admin_username, training in all_trainings:
                message = (
                    f"üë• –ì—Ä—É–ø–ø–∞: {group_title}\n"
                    f"üèãÔ∏è‚Äç‚ôÇÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: {training.kind}\n"
                    f"üìÖ –î–∞—Ç–∞: {training.date_time.strftime('%d.%m.%Y %H:%M')}\n"
                    f"üìç –ú–µ—Å—Ç–æ: {training.location}\n"
                    f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {training.duration} –º–∏–Ω—É—Ç\n"
                    f"üë§ –¢—Ä–µ–Ω–µ—Ä: @{admin_username}"
                )
                
                trainer_db = TrainerDB(admin_username)
                row_buttons = []
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã
                paid_status = trainer_db.get_payment_status(username, training.id)
                if paid_status == 0:  # –ï—Å–ª–∏ –Ω–µ –æ–ø–ª–∞—á–µ–Ω–æ
                    row_buttons.append(
                        InlineKeyboardButton(
                            "üí∞ –û–ø–ª–∞—Ç–∏—Ç—å",
                            callback_data=f"mark_paid_{training.id}"
                        )
                    )
                
                # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏
                row_buttons.append(
                    InlineKeyboardButton(
                        "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å",
                        callback_data=f"cancel_{admin_username}_{training.id}"
                    )
                )
                
                markup = InlineKeyboardMarkup()
                markup.row(*row_buttons)
                bot.send_message(call.message.chat.id, message, reply_markup=markup)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π –≤ —Ä–µ–∑–µ—Ä–≤–µ
        if all_reserve_trainings:
            bot.send_message(call.message.chat.id, "\n–í–∞—à–∏ –∑–∞–ø–∏—Å–∏ –≤ —Ä–µ–∑–µ—Ä–≤–µ:")
            for group_title, admin_username, training, position, status in all_reserve_trainings:
                status_text = (
                    "‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏" if status == 'WAITING' 
                    else "‚ùì –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–æ –º–µ—Å—Ç–æ" if status == 'OFFERED' 
                    else "‚ùå –û—Ç–∫–∞–∑–∞–Ω–æ"
                )
                message = (
                    f"üë• –ì—Ä—É–ø–ø–∞: {group_title}\n"
                    f"üèãÔ∏è‚Äç‚ôÇÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: {training.kind}\n"
                    f"üìÖ –î–∞—Ç–∞: {training.date_time.strftime('%d.%m.%Y %H:%M')}\n"
                    f"üìç –ú–µ—Å—Ç–æ: {training.location}\n"
                    f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {training.duration} –º–∏–Ω—É—Ç\n"
                    f"üë§ –¢—Ä–µ–Ω–µ—Ä: @{admin_username}\n"
                    f"üìã –ü–æ–∑–∏—Ü–∏—è –≤ —Ä–µ–∑–µ—Ä–≤–µ: {position}\n"
                    f"üìù –°—Ç–∞—Ç—É—Å: {status_text}"
                )
                
                markup = InlineKeyboardMarkup()
                markup.add(InlineKeyboardButton(
                    "–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–∑–µ—Ä–≤", 
                    callback_data=f"cancel_reserve_{admin_username}_{training.id}"
                ))
                
                bot.send_message(call.message.chat.id, message, reply_markup=markup)

    @bot.callback_query_handler(func=lambda call: call.data.startswith("swap_"))
    def show_swap_options(call: CallbackQuery):
        training_id = int(call.data.split("_")[1])
        username = call.from_user.username
        
        # –ù–∞—Ö–æ–¥–∏–º –∞–¥–º–∏–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        admin_username = find_training_admin(training_id)
        
        if not admin_username:
            bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞: —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
            
        trainer_db = TrainerDB(admin_username)
        reserve_list = trainer_db.get_reserve_list(training_id)
        
        if not reserve_list:
            bot.send_message(call.message.chat.id, "–í —Ä–µ–∑–µ—Ä–≤–µ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –æ–±–º–µ–Ω–∞")
            return
            
        markup = InlineKeyboardMarkup()
        for reserve_username, position, status in reserve_list:
            if status == 'WAITING':
                button_text = f"@{reserve_username} (–ø–æ–∑–∏—Ü–∏—è {position})"
                callback_data = f"confirm_swap_{training_id}|{reserve_username}"
                markup.add(InlineKeyboardButton(button_text, callback_data=callback_data))
        
        bot.send_message(
            call.message.chat.id, 
            "–í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ —Ä–µ–∑–µ—Ä–≤–∞ –¥–ª—è –æ–±–º–µ–Ω–∞ –º–µ—Å—Ç–∞–º–∏:",
            reply_markup=markup
        )

    @bot.callback_query_handler(func=lambda call: call.data == "invite_friend")
    def show_groups_for_invite(call: CallbackQuery):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥—Ä—É–≥–∞"""
        groups = channel_db.get_all_channels()
        if not groups:
            bot.send_message(call.message.chat.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏")
            return

        markup = InlineKeyboardMarkup()
        for group_id, title in groups:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—Ç–∫—Ä—ã—Ç—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –≥—Ä—É–ø–ø–µ
            has_open_trainings = False
            admins = admin_db.get_channel_admins(group_id)
            for admin in admins:
                trainer_db = TrainerDB(admin)
                trainings = trainer_db.get_trainings_for_channel(group_id)
                if any(t.status == "OPEN" for t in trainings):
                    has_open_trainings = True
                    break

            if has_open_trainings:
                markup.add(InlineKeyboardButton(
                    title,
                    callback_data=f"invite_group_{group_id}"
                ))

        if not markup.keyboard:
            bot.send_message(call.message.chat.id, "–ù–µ—Ç –≥—Ä—É–ø–ø —Å –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏")
            return

        bot.send_message(
            call.message.chat.id,
            "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥—Ä—É–≥–∞:",
            reply_markup=markup
        )

    @bot.callback_query_handler(func=lambda call: call.data.startswith("invite_group_"))
    def show_group_trainings_for_invite(call: CallbackQuery):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –≥—Ä—É–ø–ø–µ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è"""
        group_id = int(call.data.split("_")[2])
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
        group = channel_db.get_channel(group_id)
        if not group:
            bot.answer_callback_query(call.id, "–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
        admins = admin_db.get_channel_admins(group_id)
        open_trainings = []
        
        for admin in admins:
            trainer_db = TrainerDB(admin)
            trainings = trainer_db.get_trainings_for_channel(group_id)
            for training in trainings:
                if training.status == "OPEN":
                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–¥–º–∏–Ω–µ –∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ
                    open_trainings.append((training, admin))

        if not open_trainings:
            bot.send_message(
                call.message.chat.id,
                f"–í –≥—Ä—É–ø–ø–µ {group[1]} –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"
            )
            return

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏
        markup = InlineKeyboardMarkup()
        for training, admin in open_trainings:
            button_text = (
                f"{training.date_time.strftime('%d.%m.%Y %H:%M')} | "
                f"{training.kind} | {training.location}"
            )
            markup.add(InlineKeyboardButton(
                button_text,
                callback_data=f"invite_training_{training.id}_{admin}"
            ))

        bot.send_message(
            call.message.chat.id,
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –≤ –≥—Ä—É–ø–ø–µ {group[1]} –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥—Ä—É–≥–∞:",
            reply_markup=markup
        )

    @bot.callback_query_handler(func=lambda call: call.data.startswith("invite_training_"))
    def process_training_invite_request(call: CallbackQuery):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è"""
        parts = call.data.split("_")
        training_id = int(parts[2])
        admin_username = parts[3]
        username = call.from_user.username
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π
        invite_limit = admin_db.get_invite_limit(admin_username)
        trainer_db = TrainerDB(admin_username)
        if invite_limit > 0 and trainer_db.get_user_invites_count(username, training_id) >= invite_limit:
            bot.send_message(
                call.message.chat.id,
                f"–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π ({invite_limit}) –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ —ç—Ç–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞"
            )
            return
        
        msg = bot.send_message(
            call.message.chat.id,
            "–í–≤–µ–¥–∏—Ç–µ username –¥—Ä—É–≥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: @friend):"
        )
        bot.register_next_step_handler(msg, process_friend_invite, training_id, admin_username)

    @bot.callback_query_handler(func=lambda call: call.data.startswith(("accept_invite_", "decline_invite_")))
    def handle_invite_response(call: CallbackQuery):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ"""
        parts = call.data.split("_")
        action = parts[0]  # "accept" –∏–ª–∏ "decline"
        training_id = int(parts[2])
        username = call.from_user.username
        
        # –ù–∞—Ö–æ–¥–∏–º –∞–¥–º–∏–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        admin_username = find_training_admin(training_id)
        if not admin_username:
            bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞: —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
            
        trainer_db = TrainerDB(admin_username)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
        invite = trainer_db.fetch_one('''
            SELECT status FROM invites 
            WHERE username = ? AND training_id = ? 
            AND status = 'PENDING'
            AND invite_timestamp > datetime('now', '-1 hour')
            ORDER BY invite_timestamp DESC
            LIMIT 1
        ''', (username, training_id))
        
        if not invite:
            bot.answer_callback_query(call.id, "–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —É–∂–µ –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ")
            return
        
        if action == "accept":
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
            trainer_db.execute_query(
                "UPDATE invites SET status = 'ACCEPTED' WHERE username = ? AND training_id = ?",
                (username, training_id)
            )
            
            bot.send_message(call.message.chat.id, "‚úÖ –í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ —É—á–∞—Å—Ç–∏–µ –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ!")
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –Ω–∞ DECLINED
            trainer_db.execute_query(
                "UPDATE invites SET status = 'DECLINED' WHERE username = ? AND training_id = ?",
                (username, training_id)
            )
            # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞/—Ä–µ–∑–µ—Ä–≤–∞ –ø—Ä–∏ –æ—Ç–∫–∞–∑–µ
            trainer_db.remove_participant(username, training_id)
            trainer_db.remove_from_reserve(username, training_id)
            bot.send_message(call.message.chat.id, "–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤ —Ñ–æ—Ä—É–º–µ
        if topic_id := trainer_db.get_topic_id(training_id):
            training = trainer_db.get_training_details(training_id)
            participants = trainer_db.get_participants_by_training_id(training_id)
            forum_manager.update_participants_list(training, participants, topic_id, trainer_db)
        
        bot.delete_message(call.message.chat.id, call.message.message_id)
        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
        bot.answer_callback_query(call.id)

    @bot.callback_query_handler(func=lambda call: call.data == "auto_signup")
    def show_auto_signup_info(call: CallbackQuery):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–∑–∞–ø–∏—Å—è—Ö –∏ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø"""
        username = call.from_user.username
        if not username:
            bot.answer_callback_query(call.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à username")
            return
        
        # –°–æ–∑–¥–∞–µ–º TrainerDB –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–ª–∞–Ω—Å–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_db = TrainerDB(username)
        balance = user_db.get_auto_signups_balance(username)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∞–≤—Ç–æ–∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –≤—Å–µ–º –≥—Ä—É–ø–ø–∞–º
        message_text = f"üé´ –í–∞—à –±–∞–ª–∞–Ω—Å –∞–≤—Ç–æ–∑–∞–ø–∏—Å–µ–π: {balance}\n\n–¢–µ–∫—É—â–∏–µ –∞–≤—Ç–æ–∑–∞–ø–∏—Å–∏:\n"
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≥—Ä—É–ø–ø—ã
        groups = channel_db.get_all_channels()
        current_auto_signups = []
        
        for group in groups:
            group_id, group_title = group
            admins = admin_db.get_channel_admins(group_id)
            
            for admin in admins:
                trainer_db = TrainerDB(admin)
                trainings = trainer_db.get_trainings_for_channel(group_id)
                for training in trainings:
                    if trainer_db.has_auto_signup_request(username, training.id):
                        current_auto_signups.append((group_title, training))
        
        if current_auto_signups:
            for group_title, training in current_auto_signups:
                message_text += (
                    f"üë• –ì—Ä—É–ø–ø–∞: {group_title}\n"
                    f"üìÖ {training.date_time.strftime('%d.%m.%Y %H:%M')}\n"
                    f"üèãÔ∏è‚Äç‚ôÇÔ∏è {training.kind}\n"
                    f"üìç {training.location}\n\n"
                )
        else:
            message_text += "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–≤—Ç–æ–∑–∞–ø–∏—Å–µ–π\n\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≥—Ä—É–ø–ø–∞–º–∏ –¥–ª—è –Ω–æ–≤–æ–π –∞–≤—Ç–æ–∑–∞–ø–∏—Å–∏
        markup = InlineKeyboardMarkup()
        for group_id, title in groups:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–∫—Ä—ã—Ç—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏ –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø–∏—Å–∏
            has_available_trainings = False
            admins = admin_db.get_channel_admins(group_id)
            
            for admin in admins:
                trainer_db = TrainerDB(admin)
                trainings = trainer_db.get_trainings_for_channel(group_id)
                for training in trainings:
                    if (training.status == "CLOSED" and 
                        trainer_db.get_available_auto_signup_slots(training.id) > 0 and
                        not trainer_db.has_auto_signup_request(username, training.id)):
                        has_available_trainings = True
                        break
            if has_available_trainings:
                markup.add(InlineKeyboardButton(
                    title,
                    callback_data=f"auto_signup_group_{group_id}"
                ))
        
        if markup.keyboard:
            message_text += "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –Ω–æ–≤–æ–π –∞–≤—Ç–æ–∑–∞–ø–∏—Å–∏:"
            bot.edit_message_text(
                message_text,
                call.message.chat.id,
                call.message.message_id,
                reply_markup=markup
            )
        else:
            message_text += "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø–∏—Å–∏"
            bot.edit_message_text(
                message_text,
                call.message.chat.id,
                call.message.message_id
            )

    @bot.callback_query_handler(func=lambda call: call.data.startswith("auto_signup_group_"))
    def show_group_trainings_for_auto_signup(call: CallbackQuery):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø–∏—Å–∏ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ"""
        group_id = int(call.data.split("_")[3])
        username = call.from_user.username
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
        group = channel_db.get_channel(group_id)
        if not group:
            bot.answer_callback_query(call.id, "–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø–∏—Å–∏
        available_trainings = []
        admins = admin_db.get_channel_admins(group_id)
        
        for admin in admins:
            trainer_db = TrainerDB(admin)
            trainings = trainer_db.get_trainings_for_channel(group_id)
            for training in trainings:
                if (training.status == "CLOSED" and 
                    trainer_db.get_available_auto_signup_slots(training.id) > 0 and
                    not trainer_db.has_auto_signup_request(username, training.id)):
                    available_trainings.append((training, admin))
        
        if not available_trainings:
            bot.send_message(
                call.message.chat.id,
                f"–í –≥—Ä—É–ø–ø–µ {group[1]} –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø–∏—Å–∏"
            )
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        bot.edit_message_text(
            f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø–∏—Å–∏ –≤ –≥—Ä—É–ø–ø–µ {group[1]}:",
            call.message.chat.id,
            call.message.message_id
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        for training, admin in available_trainings:
            current_requests = len(trainer_db.get_auto_signup_requests(training.id))
            available_slots = training.max_participants // 2
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
            markup = InlineKeyboardMarkup()
            markup.add(InlineKeyboardButton(
                "üé´ –î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–∑–∞–ø–∏—Å—å",
                callback_data=f"request_auto_signup_{admin}_{training.id}"
            ))
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ
            message = (
                f"üìÖ –î–∞—Ç–∞: {training.date_time.strftime('%d.%m.%Y %H:%M')}\n"
                f"üèãÔ∏è‚Äç‚ôÇÔ∏è –¢–∏–ø: {training.kind}\n"
                f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {training.duration} –º–∏–Ω—É—Ç\n"
                f"üìç –ú–µ—Å—Ç–æ: {training.location}\n"
                f"üë• –ê–≤—Ç–æ–∑–∞–ø–∏—Å–∏: {current_requests}/{available_slots}\n"
            )
            
            bot.send_message(
                call.message.chat.id,
                message,
                reply_markup=markup
            )

    @bot.callback_query_handler(func=lambda call: call.data.startswith("request_auto_signup_"))
    def handle_auto_signup_request(call: CallbackQuery):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–≤—Ç–æ–∑–∞–ø–∏—Å—å"""
        username = call.from_user.username
        if not username:
            bot.answer_callback_query(call.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à username")
            return
        
        # –†–∞–∑–±–∏—Ä–∞–µ–º callback_data
        parts = call.data.split("_")
        admin_username = parts[3]  # username –∞–¥–º–∏–Ω–∞
        training_id = int(parts[4])  # id —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º TrainerDB –∞–¥–º–∏–Ω–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–æ–π
        trainer_db = TrainerDB(admin_username)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ
        training = trainer_db.get_training_details(training_id)
        if not training:
            bot.answer_callback_query(call.id, "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
        group = channel_db.get_channel(training.channel_id)
        if not group:
            bot.answer_callback_query(call.id, "–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_db = TrainerDB(username)
        if user_db.get_auto_signups_balance(username) <= 0:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≤—Ç–æ–∑–∞–ø–∏—Å–µ–π", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã
        if trainer_db.get_available_auto_signup_slots(training_id) <= 0:
            bot.answer_callback_query(call.id, "–í—Å–µ —Å–ª–æ—Ç—ã –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø–∏—Å–∏ –∑–∞–Ω—è—Ç—ã", show_alert=True)
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        if trainer_db.add_auto_signup_request(username, training_id):
            bot.answer_callback_query(call.id, "‚úÖ –ê–≤—Ç–æ–∑–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞", show_alert=True)
            
            confirmation = (
                "‚úÖ –í—ã –¥–æ–±–∞–≤–∏–ª–∏ –∞–≤—Ç–æ–∑–∞–ø–∏—Å—å –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É:\n\n"
                f"üë• –ì—Ä—É–ø–ø–∞: {group[1]}\n"
                f"üìÖ –î–∞—Ç–∞: {training.date_time.strftime('%d.%m.%Y %H:%M')}\n"
                f"üèãÔ∏è‚Äç‚ôÇÔ∏è –¢–∏–ø: {training.kind}\n"
                f"üìç –ú–µ—Å—Ç–æ: {training.location}\n\n"
                "–í—ã –±—É–¥–µ—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–∏—Å–∞–Ω—ã –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∑–∞–ø–∏—Å–∏"
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∞–≤—Ç–æ–∑–∞–ø–∏—Å—è—Ö
            show_auto_signup_info(call)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
            bot.send_message(call.message.chat.id, confirmation)
        else:
            bot.answer_callback_query(call.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–∑–∞–ø–∏—Å—å", show_alert=True)

    @bot.callback_query_handler(func=lambda call: call.data.startswith(("accept_reserve_", "decline_reserve_")))
    def handle_reserve_response(call: CallbackQuery):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –º–µ—Å—Ç–∞ –∏–∑ —Ä–µ–∑–µ—Ä–≤–∞"""
        parts = call.data.split("_")
        action = parts[0]  # "accept" –∏–ª–∏ "decline"
        training_id = int(parts[2])
        username = call.from_user.username
        
        # –ù–∞—Ö–æ–¥–∏–º –∞–¥–º–∏–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        admin_username = find_training_admin(training_id)
        if not admin_username:
            bot.answer_callback_query(call.id, "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        trainer_db = TrainerDB(admin_username)
        
        if action == "accept":
            if trainer_db.accept_reserve_spot(username, training_id):
                message = "‚úÖ –í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ —É—á–∞—Å—Ç–∏–µ –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ!"
            else:
                message = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É—á–∞—Å—Ç–∏–µ"
        else:
            trainer_db.remove_from_reserve(username, training_id)
            message = "–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç —É—á–∞—Å—Ç–∏—è –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤ —Ñ–æ—Ä—É–º–µ
        if topic_id := trainer_db.get_topic_id(training_id):
            training = trainer_db.get_training_details(training_id)
            participants = trainer_db.get_participants_by_training_id(training_id)
            forum_manager.update_participants_list(training, participants, topic_id, trainer_db)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —É–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        bot.answer_callback_query(call.id)
        bot.send_message(call.message.chat.id, message)
        bot.delete_message(call.message.chat.id, call.message.message_id)
