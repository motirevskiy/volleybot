import threading
import schedule
import time
from telebot.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, Message
from new_bot.database.admin import AdminDB
from new_bot.database.trainer import TrainerDB
from new_bot.utils.messages import create_schedule_message, create_open_training_message
from new_bot.utils.keyboards import get_trainings_keyboard, get_user_trainings_keyboard
from new_bot.types import Training, BotType
from typing import List, Tuple, Optional
from new_bot.utils.forum_manager import ForumManager
from datetime import datetime, timedelta

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä AdminDB
admin_db = AdminDB()

def find_training_admin(training_id: int) -> Optional[str]:
    """–ù–∞—Ö–æ–¥–∏—Ç –∞–¥–º–∏–Ω–∞, —Å–æ–∑–¥–∞–≤—à–µ–≥–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É"""
    for admin in admin_db.get_all_admins():
        trainer_db = TrainerDB(admin[0])
        if trainer_db.get_training_details(training_id):
            return admin[0]
    return None

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏
def cancel_training_handler(call: CallbackQuery, bot: BotType, forum_manager: ForumManager):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É"""
    try:
        parts = call.data.split("_")
        admin_username = parts[1]
        training_id = int(parts[2])
        username = call.from_user.username
        
        if not username:
            bot.send_message(call.message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à username.")
            return
        
        trainer_db = TrainerDB(admin_username)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if not trainer_db.is_participant(username, training_id):
            bot.answer_callback_query(call.id, "–í—ã –Ω–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É.")
            return

        # –£–¥–∞–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
        if trainer_db.remove_participant(username, training_id):
            bot.send_message(call.message.chat.id, "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏ –∑–∞–ø–∏—Å—å –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É")
            
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –º–µ—Å—Ç–æ —Å–ª–µ–¥—É—é—â–µ–º—É –≤ —Ä–µ–∑–µ—Ä–≤–µ
            if next_username := trainer_db.offer_spot_to_next_in_reserve(training_id):
                if user_id := admin_db.get_user_id(next_username):
                    markup = InlineKeyboardMarkup()
                    markup.row(
                        InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_reserve_{training_id}"),
                        InlineKeyboardButton("‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è", callback_data=f"decline_reserve_{training_id}")
                    )
                    
                    training = trainer_db.get_training_details(training_id)
                    reserve_notification = (
                        "üéâ –û—Å–≤–æ–±–æ–¥–∏–ª–æ—Å—å –º–µ—Å—Ç–æ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ!\n\n"
                        f"üìÖ –î–∞—Ç–∞: {training.date_time.strftime('%d.%m.%Y %H:%M')}\n"
                        f"üèãÔ∏è‚Äç‚ôÇÔ∏è –¢–∏–ø: {training.kind}\n"
                        f"üìç –ú–µ—Å—Ç–æ: {training.location}\n\n"
                        "–£ –≤–∞—Å –µ—Å—Ç—å 2 —á–∞—Å–∞, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É—á–∞—Å—Ç–∏–µ."
                    )
                    try:
                        bot.send_message(
                            user_id, 
                            reserve_notification,
                            reply_markup=markup
                        )
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–∑ —Ä–µ–∑–µ—Ä–≤–∞ {next_username}: {e}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤ —Ç–µ–º–µ
            if topic_id := trainer_db.get_topic_id(training_id):
                training = trainer_db.get_training_details(training_id)
                participants = trainer_db.get_participants_by_training_id(training_id)
                forum_manager.update_participants_list(training, participants, topic_id, trainer_db)
        else:
            bot.send_message(call.message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å")
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: {e}")
        print(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–π callback_data: {call.data}")
        bot.send_message(call.message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏")

def register_user_handlers(bot: BotType) -> None:
    forum_manager = ForumManager(bot)

    def check_pending_invites():
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —É–¥–∞–ª—è–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è"""
        for admin in admin_db.get_all_admins():
            trainer_db = TrainerDB(admin[0])
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å—Ç–µ–∫–ª–∏
            expired_invites = trainer_db.fetch_all('''
                SELECT username, training_id, invite_timestamp 
                FROM invites 
                WHERE status = 'PENDING' 
                AND invite_timestamp < datetime('now', '-1 hour')
                AND NOT EXISTS (
                    SELECT 1 FROM invites i2 
                    WHERE i2.username = invites.username 
                    AND i2.training_id = invites.training_id 
                    AND i2.status IN ('ACCEPTED', 'DECLINED')
                )
            ''')
            
            for invite in expired_invites:
                username, training_id = invite[0], invite[1]
                # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞/—Ä–µ–∑–µ—Ä–≤–∞ –∏ –∏–Ω–≤–∞–π—Ç
                trainer_db.remove_participant(username, training_id)
                trainer_db.remove_from_reserve(username, training_id)
                trainer_db.remove_invite(username, training_id)
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if friend_id := admin_db.get_user_id(username):
                    bot.send_message(
                        friend_id,
                        "‚ùå –í—Ä–µ–º—è –Ω–∞ –ø—Ä–∏–Ω—è—Ç–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –í—ã —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–ø–∏—Å–∫–∞."
                    )
                    
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤ —Ñ–æ—Ä—É–º–µ
                if topic_id := trainer_db.get_topic_id(training_id):
                    training = trainer_db.get_training_details(training_id)
                    participants = trainer_db.get_participants_by_training_id(training_id)
                    forum_manager.update_participants_list(training, participants, topic_id, trainer_db)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    schedule.every(30).seconds.do(check_pending_invites)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    def run_scheduler():
        while True:
            schedule.run_pending()
            time.sleep(1)

    threading.Thread(target=run_scheduler, daemon=True).start()

    def process_friend_invite(message: Message, training_id: int, admin_username: str):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥—Ä—É–≥–∞"""
        usernames = [username.strip().lstrip('@') for username in message.text.split()]
        success_invites = []
        failed_invites = []
        
        trainer_db = TrainerDB(admin_username)
        training = trainer_db.get_training_details(training_id)
        
        for friend_username in usernames:
            print(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {friend_username}")  # –û—Ç–ª–∞–¥–∫–∞
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            friend_id = admin_db.get_user_id(friend_username)
            print(f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {friend_id}")  # –û—Ç–ª–∞–¥–∫–∞
            
            if not friend_id:
                print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {friend_username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ")  # –û—Ç–ª–∞–¥–∫–∞
                failed_invites.append(f"@{friend_username} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω)")
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø–∏—Å–∞–Ω –ª–∏ —É–∂–µ
            if trainer_db.is_participant(friend_username, training_id):
                failed_invites.append(f"@{friend_username} (—É–∂–µ –∑–∞–ø–∏—Å–∞–Ω)")
                continue
            
            if trainer_db.add_invite(friend_username, admin_username, training_id):
                # –°—Ä–∞–∑—É –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫/—Ä–µ–∑–µ—Ä–≤ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                is_main_list = trainer_db.add_participant(friend_username, training_id)
                if not is_main_list:
                    position = trainer_db.add_to_reserve(friend_username, training_id)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
                markup = InlineKeyboardMarkup()
                markup.row(
                    InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_invite_{training_id}"),
                    InlineKeyboardButton("‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è", callback_data=f"decline_invite_{training_id}")
                )
                
                invite_message = (
                    f"üéü –í–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª @{admin_username} –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É:\n\n"
                    f"üìÖ –î–∞—Ç–∞: {training.date_time.strftime('%d.%m.%Y %H:%M')}\n"
                    f"üèãÔ∏è‚Äç‚ôÇÔ∏è –¢–∏–ø: {training.kind}\n"
                    f"üìç –ú–µ—Å—Ç–æ: {training.location}\n"
                    f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {training.price}‚ÇΩ\n\n"
                    "‚ö†Ô∏è –£ –≤–∞—Å –µ—Å—Ç—å 1 —á–∞—Å –Ω–∞ –ø—Ä–∏–Ω—è—Ç–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è"
                )
                
                bot.send_message(friend_id, invite_message, reply_markup=markup)
                success_invites.append(f"@{friend_username}")
            else:
                failed_invites.append(f"@{friend_username} (–æ—à–∏–±–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è)")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤ —Ñ–æ—Ä—É–º–µ
            if topic_id := trainer_db.get_topic_id(training_id):
                training = trainer_db.get_training_details(training_id)
                participants = trainer_db.get_participants_by_training_id(training_id)
                forum_manager.update_participants_list(training, participants, topic_id, trainer_db)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        result_message = []
        if success_invites:
            result_message.append("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω—ã:\n" + "\n".join(success_invites))
        if failed_invites:
            result_message.append("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å:\n" + "\n".join(failed_invites))
        
        bot.reply_to(message, "\n\n".join(result_message))

    @bot.callback_query_handler(func=lambda call: call.data.startswith("cancel_reserve_"))
    def cancel_reserve_signup(call: CallbackQuery):
        try:
            _, _, admin_username, training_id = call.data.split("_")
            training_id = int(training_id)
            username = call.from_user.username
            
            trainer_db = TrainerDB(admin_username)
            training = trainer_db.get_training_details(training_id)
            
            if not training:
                bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞: —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
            
            reserve_entry = trainer_db.fetch_one('''
                SELECT position FROM reserve 
                WHERE username = ? AND training_id = ?
            ''', (username, training_id))
            
            if not reserve_entry:
                bot.send_message(call.message.chat.id, "–í—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ä–µ–∑–µ—Ä–≤–µ —ç—Ç–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏")
                return
            
            if trainer_db.cancel_reserve(username, training_id):
                bot.send_message(call.message.chat.id, "–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏ –∑–∞–ø–∏—Å—å –≤ —Ä–µ–∑–µ—Ä–≤–µ")
                
                if topic_id := trainer_db.get_topic_id(training_id):
                    participants = trainer_db.get_participants_by_training_id(training_id)
                    forum_manager.update_participants_list(training, participants, topic_id, trainer_db)
            else:
                bot.send_message(call.message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ —Ä–µ–∑–µ—Ä–≤–µ")
                
        except Exception as e:
            bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")

    @bot.callback_query_handler(func=lambda call: call.data == "get_schedule")
    def get_schedule(call: CallbackQuery):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"""
        all_trainings = []
        admins_map = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è training_id -> admin_username
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –æ—Ç –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤
        for admin in admin_db.get_all_admins():
            trainer_db = TrainerDB(admin[0])
            trainings = trainer_db.get_training_ids()
            if trainings:
                for training_id in trainings:
                    if training := trainer_db.get_training_details(training_id[0]):
                        all_trainings.append(training)
                        admins_map[training.id] = admin[0]  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
        
        message = create_schedule_message(all_trainings, admins_map)
        bot.send_message(call.message.chat.id, message)

    @bot.callback_query_handler(func=lambda call: call.data == "sign_up_training")
    def sign_up_training(call: CallbackQuery) -> None:
        admins = admin_db.get_all_admins()
        if not admins:
            bot.send_message(call.message.chat.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.")
            return

        trainings: List[Tuple[int, str, str, str]] = []
        for admin in admins:
            admin_id = admin[0]
            trainer_db = TrainerDB(admin_id)
            training_ids = trainer_db.get_training_ids()

            for id in training_ids:
                details = trainer_db.get_training_details(id[0])
                if details and details.status == "OPEN":
                    trainings.append((
                        details.id,
                        details.date_time.strftime('%Y-%m-%d %H:%M'),
                        details.kind,
                        details.location
                    ))

        if not trainings:
            bot.send_message(call.message.chat.id, "–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –¥–ª—è –∑–∞–ø–∏—Å–∏.")
            return

        markup = get_trainings_keyboard(trainings, "signup")
        bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –¥–ª—è –∑–∞–ø–∏—Å–∏:", reply_markup=markup)

    @bot.callback_query_handler(func=lambda call: call.data == "cancel_message_sign_up")
    def cancel_message_sign_up(call: CallbackQuery) -> None:
        user_id = call.from_user.id
        admin_db.execute_query("DELETE FROM users WHERE user_id = ?", (user_id,))
        bot.send_message(call.message.chat.id, "–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–Ω—ã –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏.")

    @bot.callback_query_handler(func=lambda call: call.data.startswith("signup_"))
    def sign_up_for_training(call: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É"""
        try:
            training_id = int(call.data.split("_")[1])
            username = call.from_user.username
            trainer_db = TrainerDB(admin_username)  # admin_username –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–µ–Ω
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
            training = trainer_db.get_training_details(training_id)
            if not training or training.status != "OPEN":
                bot.answer_callback_query(call.id, "–ó–∞–ø–∏—Å—å –Ω–∞ —ç—Ç—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –∑–∞–∫—Ä—ã—Ç–∞")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø–∏—Å–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            if trainer_db.is_participant(username, training_id):
                bot.answer_callback_query(call.id, "–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç (–≤–∫–ª—é—á–∞—è PENDING)
            if not trainer_db.is_spot_available(training_id):
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ä–µ–∑–µ—Ä–≤
                position = trainer_db.add_to_reserve(username, training_id)
                bot.answer_callback_query(
                    call.id,
                    f"–í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Å–ø–∏—Å–æ–∫ (–ø–æ–∑–∏—Ü–∏—è: {position})",
                    show_alert=True
                )
                return
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
            trainer_db.add_participant(username, training_id)
            # ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ ...
        except Exception as e:
            bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É")

    @bot.callback_query_handler(func=lambda call: call.data.startswith("cancel_") and len(call.data.split("_")) == 3)
    def cancel_training(call: CallbackQuery):
        print("user.py str 370 called")
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É"""
        cancel_training_handler(call, bot, forum_manager)

    @bot.callback_query_handler(func=lambda call: call.data == "my_trainings")
    def show_user_trainings(call: CallbackQuery):
        username = call.from_user.username
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–∏—Å–æ–∫ –∏ —Ä–µ–∑–µ—Ä–≤)
        trainings = []
        reserve_trainings = []
        
        for admin in admin_db.get_all_admins():
            trainer_db = TrainerDB(admin[0])
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏
            user_trainings = trainer_db.get_trainings_for_user(username)
            for training in user_trainings:
                trainings.append((admin[0], training))
            
            # –ó–∞–ø–∏—Å–∏ –≤ —Ä–µ–∑–µ—Ä–≤–µ
            reserve = trainer_db.fetch_all('''
                SELECT s.training_id, s.date_time, s.duration, 
                s.kind, s.location, s.status, s.max_participants, 
                r.position, r.status
                FROM schedule s
                JOIN reserve r ON s.training_id = r.training_id
                WHERE r.username = ?
            ''', (username,))
            
            for r in reserve:
                training = Training.from_db_row(r[1:7])
                training.id = r[0]
                reserve_trainings.append((admin[0], training, r[7], r[8]))  # admin, training, position, status
        
        if not trainings and not reserve_trainings:
            bot.send_message(call.message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏")
            return
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
        if trainings:
            bot.send_message(call.message.chat.id, "–í–∞—à–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:")
            for admin_username, training in trainings:
                message = (
                    f"üèãÔ∏è‚Äç‚ôÇÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: {training.kind}\n"
                    f"üìÖ –î–∞—Ç–∞: {training.date_time.strftime('%d.%m.%Y %H:%M')}\n"
                    f"üìç –ú–µ—Å—Ç–æ: {training.location}\n"
                    f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {training.duration} –º–∏–Ω—É—Ç\n"
                    f"üë§ –¢—Ä–µ–Ω–µ—Ä: @{admin_username}"
                )
                
                row_buttons = []
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã
                paid_status = trainer_db.get_payment_status(username, training.id)
                if paid_status == 0:  # –ï—Å–ª–∏ –Ω–µ –æ–ø–ª–∞—á–µ–Ω–æ
                    row_buttons.append(
                        InlineKeyboardButton(
                            "üí∞ –û–ø–ª–∞—Ç–∏—Ç—å",
                            callback_data=f"mark_paid_{training.id}"
                        )
                    )
                
                # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏
                row_buttons.append(
                    InlineKeyboardButton(
                        "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å",
                        callback_data=f"cancel_{admin_username}_{training.id}"
                    )
                )
                
                markup = InlineKeyboardMarkup()
                markup.row(*row_buttons)
                bot.send_message(call.message.chat.id, message, reply_markup=markup)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π –≤ —Ä–µ–∑–µ—Ä–≤–µ
        if reserve_trainings:
            bot.send_message(call.message.chat.id, "\n–í–∞—à–∏ –∑–∞–ø–∏—Å–∏ –≤ —Ä–µ–∑–µ—Ä–≤–µ:")
            for admin_username, training, position, status in reserve_trainings:
                trainer_db = TrainerDB(admin_username)  # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∫–∞–∂–¥–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
                status_text = "‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏" if status == 'WAITING' else "‚ùì –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–æ –º–µ—Å—Ç–æ" if status == 'OFFERED' else "‚ùå –û—Ç–∫–∞–∑–∞–Ω–æ"
                message = (
                    f"üèãÔ∏è‚Äç‚ôÇÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: {training.kind}\n"
                    f"üìÖ –î–∞—Ç–∞: {training.date_time.strftime('%d.%m.%Y %H:%M')}\n"
                    f"üìç –ú–µ—Å—Ç–æ: {training.location}\n"
                    f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {training.duration} –º–∏–Ω—É—Ç\n"
                    f"üë§ –¢—Ä–µ–Ω–µ—Ä: @{admin_username}\n"
                    f"üìã –ü–æ–∑–∏—Ü–∏—è –≤ —Ä–µ–∑–µ—Ä–≤–µ: {position}\n"
                    f"üìù –°—Ç–∞—Ç—É—Å: {status_text}"
                )
                markup = InlineKeyboardMarkup()
                row_buttons = []
                
                # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã —Ä–µ–∑–µ—Ä–≤–∞
                row_buttons.append(
                    InlineKeyboardButton(
                        "–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–∑–µ—Ä–≤", 
                        callback_data=f"cancel_reserve_{admin_username}_{training.id}"
                    )
                )
                
                markup.row(*row_buttons)
                bot.send_message(call.message.chat.id, message, reply_markup=markup)

    @bot.callback_query_handler(func=lambda call: call.data.startswith("swap_"))
    def show_swap_options(call: CallbackQuery):
        training_id = int(call.data.split("_")[1])
        username = call.from_user.username
        
        # –ù–∞—Ö–æ–¥–∏–º –∞–¥–º–∏–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        admin_username = find_training_admin(training_id)
        
        if not admin_username:
            bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞: —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
            
        trainer_db = TrainerDB(admin_username)
        reserve_list = trainer_db.get_reserve_list(training_id)
        
        if not reserve_list:
            bot.send_message(call.message.chat.id, "–í —Ä–µ–∑–µ—Ä–≤–µ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –æ–±–º–µ–Ω–∞")
            return
            
        markup = InlineKeyboardMarkup()
        for reserve_username, position, status in reserve_list:
            if status == 'WAITING':
                button_text = f"@{reserve_username} (–ø–æ–∑–∏—Ü–∏—è {position})"
                callback_data = f"confirm_swap_{training_id}|{reserve_username}"
                markup.add(InlineKeyboardButton(button_text, callback_data=callback_data))
        
        bot.send_message(
            call.message.chat.id, 
            "–í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ —Ä–µ–∑–µ—Ä–≤–∞ –¥–ª—è –æ–±–º–µ–Ω–∞ –º–µ—Å—Ç–∞–º–∏:",
            reply_markup=markup
        )

    @bot.callback_query_handler(func=lambda call: call.data.startswith("confirm_swap_"))
    def confirm_swap_handler(call):
        try:
            # –°–Ω–∞—á–∞–ª–∞ —Ä–∞–∑–¥–µ–ª—è–µ–º –ø–æ |
            main_parts = call.data.split("|")
            if len(main_parts) != 2:
                raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
                
            # –ó–∞—Ç–µ–º —Ä–∞–∑–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å –ø–æ _
            cmd_parts = main_parts[0].split("_")
            training_id = int(cmd_parts[2])
            target_username = main_parts[1]
            
            # –ù–∞—Ö–æ–¥–∏–º –∞–¥–º–∏–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
            admin_username = find_training_admin(training_id)
            
            if not admin_username:
                bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞: —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
                
            trainer_db = TrainerDB(admin_username)
            
            # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            initiator_id = call.from_user.id
            target_user_id = admin_db.get_user_id(target_username)
            
            if trainer_db.swap_participants(call.from_user.username, target_username, training_id):
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä—É –æ–±–º–µ–Ω–∞
                bot.send_message(
                    initiator_id,
                    f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–º–µ–Ω—è–ª–∏—Å—å –º–µ—Å—Ç–∞–º–∏ —Å @{target_username}"
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Ç–æ—Ä–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É
                if target_user_id:
                    bot.send_message(
                        target_user_id,
                        f"@{call.from_user.username} –ø–æ–º–µ–Ω—è–ª—Å—è —Å –≤–∞–º–∏ –º–µ—Å—Ç–∞–º–∏ –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ"
                    )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                update_participants_message(training_id)
            else:
                bot.send_message(call.message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–±–º–µ–Ω –º–µ—Å—Ç–∞–º–∏")
        except Exception as e:
            bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–±–º–µ–Ω –º–µ—Å—Ç–∞–º–∏")

    @bot.callback_query_handler(func=lambda call: call.data.startswith("mark_paid_"))
    def mark_paid_handler(call: CallbackQuery):
        training_id = int(call.data.split("_")[2])
        username = call.from_user.username
        
        # –ù–∞—Ö–æ–¥–∏–º –∞–¥–º–∏–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        admin_username = find_training_admin(training_id)
        if not admin_username:
            bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞: —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        trainer_db = TrainerDB(admin_username)
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
        bot.send_message(
            call.message.chat.id,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã"
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
        bot.register_next_step_handler(call.message, process_payment_screenshot, training_id)

    @bot.callback_query_handler(func=lambda call: call.data.startswith("show_training_info_"))
    def show_training_info(call: CallbackQuery):
        training_id = int(call.data.split("_")[2])
        
        # –ù–∞—Ö–æ–¥–∏–º –∞–¥–º–∏–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        admin_username = find_training_admin(training_id)
        if not admin_username:
            bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞: —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
            
        trainer_db = TrainerDB(admin_username)
        training = trainer_db.get_training_details(training_id)
        
        if training:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            participants = trainer_db.get_participants_by_training_id(training_id)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã
            payment_details = admin_db.get_payment_details(admin_username)
            
            message = (
                f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ:\n\n"
                f"üìÖ –î–∞—Ç–∞: {training.date_time.strftime('%d.%m.%Y %H:%M')}\n"
                f"üèãÔ∏è‚Äç‚ôÇÔ∏è –¢–∏–ø: {training.kind}\n"
                f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {training.duration} –º–∏–Ω—É—Ç\n"
                f"üìç –ú–µ—Å—Ç–æ: {training.location}\n"
                f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {training.price}‚ÇΩ\n"
                f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ ({len(participants)}/{training.max_participants}):\n"
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å –∏—Ö —Å—Ç–∞—Ç—É—Å–æ–º –æ–ø–ª–∞—Ç—ã
            for username in participants:
                paid_status = trainer_db.get_payment_status(username, training_id)
                message += format_participant(username, paid_status) + "\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã
            message += f"\nüí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n{payment_details}"
            
            bot.send_message(call.message.chat.id, message)

    @bot.callback_query_handler(func=lambda call: call.data == "show_payment_details")
    def show_payment_details(call: CallbackQuery):
        # –ù–∞—Ö–æ–¥–∏–º –∞–¥–º–∏–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        admin_username = None
        for admin in admin_db.get_all_admins():
            trainer_db = TrainerDB(admin[0])
            admin_username = admin[0]
            break
        
        if not admin_username:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã
        payment_details = admin_db.get_payment_details(admin_username)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        bot.answer_callback_query(
            call.id,
            f"üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n\n{payment_details}",
            show_alert=True
        )

    @bot.callback_query_handler(func=lambda call: call.data == "invite_friend")
    def show_trainings_for_invite(call: CallbackQuery):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥—Ä—É–≥–∞"""
        username = call.from_user.username
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –æ—Ç –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤
        all_trainings = []
        for admin in admin_db.get_all_admins():
            trainer_db = TrainerDB(admin[0])
            trainings = trainer_db.get_training_ids()
            for training_id in trainings:
                if training := trainer_db.get_training_details(training_id[0]):
                    if training.status == "OPEN":
                        all_trainings.append(training)
        
        if not all_trainings:
            bot.send_message(
                call.message.chat.id,
                "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è"
            )
            return
        
        markup = get_trainings_keyboard(all_trainings, "invite_friend")
        bot.send_message(
            call.message.chat.id,
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞:",
            reply_markup=markup
        )

    @bot.callback_query_handler(func=lambda call: call.data.startswith("invite_friend_"))
    def process_friend_invite_request(call: CallbackQuery):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è"""
        training_id = int(call.data.split("_")[2])
        username = call.from_user.username
        
        # –ù–∞—Ö–æ–¥–∏–º –∞–¥–º–∏–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        admin_username = find_training_admin(training_id)
        if not admin_username:
            bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞: —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π
        invite_limit = admin_db.get_invite_limit(admin_username)
        trainer_db = TrainerDB(admin_username)
        if invite_limit > 0 and trainer_db.get_user_invites_count(username, training_id) >= invite_limit:
            bot.send_message(
                call.message.chat.id,
                f"–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π ({invite_limit}) –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ —ç—Ç–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞"
            )
            return
        
        msg = bot.send_message(
            call.message.chat.id,
            "–í–≤–µ–¥–∏—Ç–µ username –¥—Ä—É–≥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: @friend):"
        )
        bot.register_next_step_handler(msg, process_friend_invite, training_id, admin_username)

    @bot.callback_query_handler(func=lambda call: call.data.startswith(("accept_invite_", "decline_invite_")))
    def handle_invite_response(call: CallbackQuery):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ"""
        parts = call.data.split("_")
        action = parts[0]  # "accept" –∏–ª–∏ "decline"
        training_id = int(parts[2])
        username = call.from_user.username
        
        # –ù–∞—Ö–æ–¥–∏–º –∞–¥–º–∏–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        admin_username = find_training_admin(training_id)
        if not admin_username:
            bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞: —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
            
        trainer_db = TrainerDB(admin_username)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
        invite = trainer_db.fetch_one('''
            SELECT status FROM invites 
            WHERE username = ? AND training_id = ? 
            AND status = 'PENDING'
            AND invite_timestamp > datetime('now', '-1 hour')
            ORDER BY invite_timestamp DESC
            LIMIT 1
        ''', (username, training_id))
        
        if not invite:
            bot.answer_callback_query(call.id, "–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —É–∂–µ –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ")
            return
        
        if action == "accept":
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
            trainer_db.execute_query(
                "UPDATE invites SET status = 'ACCEPTED' WHERE username = ? AND training_id = ?",
                (username, training_id)
            )
            
            bot.send_message(call.message.chat.id, "‚úÖ –í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ —É—á–∞—Å—Ç–∏–µ –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ!")
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –Ω–∞ DECLINED
            trainer_db.execute_query(
                "UPDATE invites SET status = 'DECLINED' WHERE username = ? AND training_id = ?",
                (username, training_id)
            )
            # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞/—Ä–µ–∑–µ—Ä–≤–∞ –ø—Ä–∏ –æ—Ç–∫–∞–∑–µ
            trainer_db.remove_participant(username, training_id)
            trainer_db.remove_from_reserve(username, training_id)
            bot.send_message(call.message.chat.id, "–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤ —Ñ–æ—Ä—É–º–µ
        if topic_id := trainer_db.get_topic_id(training_id):
            training = trainer_db.get_training_details(training_id)
            participants = trainer_db.get_participants_by_training_id(training_id)
            forum_manager.update_participants_list(training, participants, topic_id, trainer_db)
        
        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
        bot.answer_callback_query(call.id)

    @bot.callback_query_handler(func=lambda call: call.data == "cancel_message_sign_up")
    def unsubscribe_from_notifications(call: CallbackQuery):
        """–û—Ç–ø–∏—Å–∫–∞ –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏"""
        username = call.from_user.username
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        admin_db.execute_query(
            "UPDATE users SET subscribed = 0 WHERE username = ?",
            (username,)
        )
        
        bot.answer_callback_query(
            call.id,
            "–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏",
            show_alert=True
        )

    @bot.callback_query_handler(func=lambda call: call.data.startswith("accept_reserve_"))
    def accept_reserve(call: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏–Ω—è—Ç–∏—è –º–µ—Å—Ç–∞ –∏–∑ —Ä–µ–∑–µ—Ä–≤–∞"""
        try:
            training_id = int(call.data.split("_")[-1])
            username = call.from_user.username
            
            
            admin_username = find_training_admin(training_id)
            if not admin_username:
                bot.answer_callback_query(call.id, "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
            
            trainer_db = TrainerDB(admin_username)
            training = trainer_db.get_training_details(training_id)
            
            if not training:
                bot.answer_callback_query(call.id, "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
            
            if trainer_db.accept_reserve_spot(username, training_id):
                bot.answer_callback_query(call.id, "‚úÖ –í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ —É—á–∞—Å—Ç–∏–µ –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ!", show_alert=True)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                confirmation = (
                    "‚úÖ –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É:\n\n"
                    f"üìÖ –î–∞—Ç–∞: {training.date_time.strftime('%d.%m.%Y %H:%M')}\n"
                    f"üèãÔ∏è‚Äç‚ôÇÔ∏è –¢–∏–ø: {training.kind}\n"
                    f"üìç –ú–µ—Å—Ç–æ: {training.location}\n"
                    f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {training.price}‚ÇΩ"
                )
                bot.send_message(call.message.chat.id, confirmation)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤ —Ñ–æ—Ä—É–º–µ
                if topic_id := trainer_db.get_topic_id(training_id):
                    participants = trainer_db.get_participants_by_training_id(training_id)
                    forum_manager.update_participants_list(training, participants, topic_id, trainer_db)
                
                bot.delete_message(call.message.chat.id, call.message.message_id)
            else:
                bot.answer_callback_query(call.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É—á–∞—Å—Ç–∏–µ", show_alert=True)
            
        except Exception as e:
            print(f"[ERROR] Error in accept_reserve: {e}")
            bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

    @bot.callback_query_handler(func=lambda call: call.data.startswith("decline_reserve_"))
    def decline_reserve(call: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–∞–∑–∞ –æ—Ç –º–µ—Å—Ç–∞ –∏–∑ —Ä–µ–∑–µ—Ä–≤–∞"""
        try:
            training_id = int(call.data.split("_")[-1])
            username = call.from_user.username
            
            admin_username = find_training_admin(training_id)
            if not admin_username:
                bot.answer_callback_query(call.id, "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
            
            trainer_db = TrainerDB(admin_username)
            if trainer_db.decline_reserve_spot(username, training_id):
                bot.answer_callback_query(call.id, "–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç —É—á–∞—Å—Ç–∏—è –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ")
                bot.delete_message(call.message.chat.id, call.message.message_id)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤ —Ñ–æ—Ä—É–º–µ
                if topic_id := trainer_db.get_topic_id(training_id):
                    training = trainer_db.get_training_details(training_id)
                    participants = trainer_db.get_participants_by_training_id(training_id)
                    forum_manager.update_participants_list(training, participants, topic_id, trainer_db)
            else:
                bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–∞–∑–µ")
            
        except Exception as e:
            print(f"Error in decline_reserve: {e}")
            bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

    @bot.callback_query_handler(func=lambda call: call.data == "auto_signup")
    def show_auto_signup_info(call: CallbackQuery):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–∑–∞–ø–∏—Å—è—Ö –∏ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"""
        username = call.from_user.username
        if not username:
            bot.answer_callback_query(call.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à username")
            return
        
        # –°–æ–∑–¥–∞–µ–º TrainerDB –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–ª–∞–Ω—Å–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_db = TrainerDB(username)
        balance = user_db.get_auto_signups_balance(username)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∞–≤—Ç–æ–∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_requests = user_db.get_user_auto_signup_requests(username)
        
        message_text = (
            f"üé´ –í–∞—à –±–∞–ª–∞–Ω—Å –∞–≤—Ç–æ–∑–∞–ø–∏—Å–µ–π: {balance}\n\n"
            "–¢–µ–∫—É—â–∏–µ –∞–≤—Ç–æ–∑–∞–ø–∏—Å–∏:\n"
        )
        
        if user_requests:
            for training in user_requests:
                message_text += (
                    f"üìÖ {training.date_time.strftime('%d.%m.%Y %H:%M')}\n"
                    f"üèãÔ∏è‚Äç‚ôÇÔ∏è {training.kind}\n"
                    f"üìç {training.location}\n\n"
                )
        else:
            message_text += "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–≤—Ç–æ–∑–∞–ø–∏—Å–µ–π\n\n"
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫—Ä—ã—Ç—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –æ—Ç –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤
        trainings = []
        all_admins = admin_db.get_all_admins()
        
        for admin in all_admins:
            trainer_db = TrainerDB(admin[0])
            training_ids = trainer_db.get_training_ids()
            
            for training_id in training_ids:
                if training := trainer_db.get_training_details(training_id[0]):
                    if (training.status == "CLOSED" and 
                        trainer_db.get_available_auto_signup_slots(training_id[0]) > 0 and
                        not trainer_db.has_auto_signup_request(username, training_id[0])):
                        trainings.append((admin[0], training))
        
        if trainings:
            message_text += "\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø–∏—Å–∏:\n\n"
            markup = InlineKeyboardMarkup(row_width=1)
            
            for admin_username, training in trainings:
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
                trainer_db = TrainerDB(admin_username)
                current_requests = len(trainer_db.get_auto_signup_requests(training.id))
                message_text += (
                    f"üìÖ {training.date_time.strftime('%d.%m.%Y %H:%M')}\n"
                    f"üèãÔ∏è‚Äç‚ôÇÔ∏è –¢–∏–ø: {training.kind}\n"
                    f"üìç –ú–µ—Å—Ç–æ: {training.location}\n"
                    f"‚úçÔ∏è –ê–≤—Ç–æ–∑–∞–ø–∏—Å–µ–π: {current_requests}/{training.max_participants // 2}\n"
                    "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n"
                )
                
                markup.add(InlineKeyboardButton(
                    f"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–∑–∞–ø–∏—Å—å –Ω–∞ {training.date_time.strftime('%d.%m.%Y %H:%M')}",
                    callback_data=f"request_auto_signup_{admin_username}_{training.id}"
                ))
            
            markup.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel"))
            
            bot.edit_message_text(
                message_text,
                call.message.chat.id,
                call.message.message_id,
                reply_markup=markup
            )
        else:
            message_text += "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø–∏—Å–∏"
            bot.edit_message_text(
                message_text,
                call.message.chat.id,
                call.message.message_id
            )

    @bot.callback_query_handler(func=lambda call: call.data.startswith("request_auto_signup_"))
    def handle_auto_signup_request(call: CallbackQuery):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–≤—Ç–æ–∑–∞–ø–∏—Å—å"""
        username = call.from_user.username
        if not username:
            bot.answer_callback_query(call.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à username")
            return
        
        # –†–∞–∑–±–∏—Ä–∞–µ–º callback_data
        parts = call.data.split("_")
        # –§–æ—Ä–º–∞—Ç: "request_auto_signup_admin_username_training_id"
        admin_username = parts[-2]  # –ü—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç - username –∞–¥–º–∏–Ω–∞
        training_id = int(parts[-1])  # –ü–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç - id —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º TrainerDB –∞–¥–º–∏–Ω–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–æ–π
        trainer_db = TrainerDB(admin_username)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_db = TrainerDB(username)
        if user_db.get_auto_signups_balance(username) <= 0:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≤—Ç–æ–∑–∞–ø–∏—Å–µ–π", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã
        if trainer_db.get_available_auto_signup_slots(training_id) <= 0:
            bot.answer_callback_query(call.id, "–í—Å–µ —Å–ª–æ—Ç—ã –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø–∏—Å–∏ –∑–∞–Ω—è—Ç—ã", show_alert=True)
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        if trainer_db.add_auto_signup_request(username, training_id):
            training = trainer_db.get_training_details(training_id)
            bot.answer_callback_query(call.id, "‚úÖ –ê–≤—Ç–æ–∑–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞", show_alert=True)
            
            confirmation = (
                "‚úÖ –í—ã –¥–æ–±–∞–≤–∏–ª–∏ –∞–≤—Ç–æ–∑–∞–ø–∏—Å—å –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É:\n\n"
                f"üìÖ –î–∞—Ç–∞: {training.date_time.strftime('%d.%m.%Y %H:%M')}\n"
                f"üèãÔ∏è‚Äç‚ôÇÔ∏è –¢–∏–ø: {training.kind}\n"
                f"üìç –ú–µ—Å—Ç–æ: {training.location}\n\n"
                "–í—ã –±—É–¥–µ—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–∏—Å–∞–Ω—ã –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∑–∞–ø–∏—Å–∏"
            )
            bot.edit_message_text(
                confirmation,
                call.message.chat.id,
                call.message.message_id
            )
        else:
            bot.answer_callback_query(call.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–∑–∞–ø–∏—Å—å", show_alert=True)

def process_payment_screenshot(message: Message, training_id: int):
    if not message.photo:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç")
        return
        
    username = message.from_user.username
    admin_username = find_training_admin(training_id)
    trainer_db = TrainerDB(admin_username)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å "–æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
    trainer_db.set_payment_status(username, training_id, 1)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –∞–¥–º–∏–Ω—É
    admin_id = AdminDB().get_user_id(admin_username)
    if admin_id:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
        markup = InlineKeyboardMarkup()
        markup.add(
            InlineKeyboardButton(
                "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", 
                callback_data=f"confirm_payment_{training_id}_{username}"
            ),
            InlineKeyboardButton(
                "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                callback_data=f"reject_payment_{trainingid}_{username}"
            )
        )
        
        # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Ñ–æ—Ç–æ –∞–¥–º–∏–Ω—É
        bot.send_photo(
            admin_id,
            message.photo[-1].file_id,
            caption=f"–°–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã –æ—Ç @{username} –∑–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É #{training_id}",
            reply_markup=markup
        )
        
        bot.send_message(
            message.chat.id,
            "–°–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É"
        )

def get_training_type(message: Message, action: str, training_id: Optional[int]) -> None:
    user_id = message.from_user.id
    try:
        training_kind = validate_kind(message.text)
        training_creation_data[user_id].kind = training_kind
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:")
        bot.register_next_step_handler(msg, get_training_location, action, training_id)
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.")
        bot.register_next_step_handler(message, get_training_type, action, training_id)