import uuid
import os
from typing import List, Optional, Dict
from telebot.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from new_bot.config import SUPERADMIN_USERNAME
from new_bot.database.admin import AdminDB
from new_bot.database.trainer import TrainerDB
from new_bot.database.channel import ChannelDB
from new_bot.utils.keyboards import (
    get_trainings_keyboard,
    get_admin_list_keyboard,
    get_confirm_keyboard
)
from new_bot.types import Training, TrainingData, HandlerType, BotType
from new_bot.utils.validators import (
    validate_datetime,
    validate_duration,
    validate_kind,
    validate_location,
    ValidationError
)
from datetime import datetime, timedelta
from new_bot.utils.forum_manager import ForumManager
from new_bot.utils.training import find_training_admin

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
training_creation_data: Dict[int, TrainingData] = {}

admin_db = AdminDB()
channel_db = ChannelDB()
ADMIN_KEY = ""
admin_selection = {}

def register_admin_handlers(bot: BotType) -> None:
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä ForumManager
    forum_manager = ForumManager(bot)
    
    @bot.message_handler(commands=["admin"])
    def admin_menu(message: Message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        username = message.from_user.username
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø—ã
        channel_id = admin_db.get_admin_channel(username)
        if not channel_id:
            bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        show_admin_menu(message)
    
    @bot.callback_query_handler(func=lambda call: call.data == "get_admin")
    def request_admin_key(call: CallbackQuery):
        username = call.from_user.username
        if admin_db.get_admin_channel(username):
            bot.send_message(call.message.chat.id, "–í—ã —É–∂–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã!")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø
        groups = channel_db.get_all_channels()
        if not groups:
            bot.send_message(
                call.message.chat.id,
                "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /init"
            )
            return

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≥—Ä—É–ø–ø–∞–º–∏
        markup = InlineKeyboardMarkup()
        for group_id, title in groups:
            markup.add(InlineKeyboardButton(
                title,
                callback_data=f"select_group_{group_id}"
            ))

        bot.send_message(
            call.message.chat.id,
            "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
            reply_markup=markup
        )

    @bot.callback_query_handler(func=lambda call: call.data.startswith("select_group_"))
    def group_selected(call: CallbackQuery):
        group_id = int(call.data.split("_")[2])
        username = call.from_user.username

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã
        try:
            chat_member = bot.get_chat_member(group_id, call.from_user.id)
            if chat_member.status not in ['creator', 'administrator']:
                bot.answer_callback_query(
                    call.id,
                    "‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã",
                    show_alert=True
                )
                return
        except Exception as e:
            print(f"Error checking admin rights: {e}")
            bot.answer_callback_query(
                call.id,
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                show_alert=True
            )
            return

        if not ADMIN_KEY:
            bot.send_message(call.message.chat.id, "–°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ —É —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞.")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        admin_selection[username] = group_id

        msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")
        bot.register_next_step_handler(msg, process_admin_key)

    def process_admin_key(message: Message):
        username = message.from_user.username
        if username not in admin_selection:  # admin_selection —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π channel_id
            bot.reply_to(message, "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É")
            return

        channel_id = admin_selection[username]
        global ADMIN_KEY

        if message.text == str(ADMIN_KEY):
            # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü—É users
            admin_db.execute_query(
                "INSERT OR IGNORE INTO users (username, user_id) VALUES (?, ?)",
                (username, message.from_user.id)
            )
            # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
            admin_db.add_admin(username, channel_id)  # –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–¥–∞–µ–º channel_id
            TrainerDB(username)
            bot.send_message(message.chat.id, "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç–µ–ø–µ—Ä—å –≤—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≥—Ä—É–ø–ø—ã!")
            ADMIN_KEY = ""
            del admin_selection[username]  # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        else:
            bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á!")

    @bot.message_handler(commands=["generate_admin_key"])
    def generate_admin_key(message: Message):
        if message.from_user.username != SUPERADMIN_USERNAME:
            bot.send_message(message.chat.id, "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
            return
        global ADMIN_KEY
        ADMIN_KEY = uuid.uuid4()
        bot.send_message(message.chat.id, f"–ö–ª—é—á –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {ADMIN_KEY}")

    @bot.message_handler(commands=["remove_admin"])
    def remove_admin_request(message: Message):
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
        if message.from_user.username != SUPERADMIN_USERNAME:
            return
            
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≥—Ä—É–ø–ø –∏ –∏—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        groups = channel_db.get_all_channels()
        if not groups:
            bot.send_message(message.chat.id, "–ù–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø")
            return
            
        markup = InlineKeyboardMarkup()
        for group_id, title in groups:
            admins = admin_db.get_channel_admins(group_id)
            if admins:
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≥—Ä—É–ø–ø—ã
                markup.add(InlineKeyboardButton(f"üì¢ {title}", callback_data="group_header"))
                # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≥—Ä—É–ø–ø—ã
                for admin in admins:
                    markup.add(InlineKeyboardButton(
                        f"‚ùå –£–¥–∞–ª–∏—Ç—å @{admin}",
                        callback_data=f"remadm_{admin}_{group_id}"
                    ))
                markup.add(InlineKeyboardButton("‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ", callback_data="separator"))
        
        if not markup.keyboard:
            bot.send_message(message.chat.id, "–ù–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return
            
        bot.send_message(
            message.chat.id,
            "–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=markup
        )

    @bot.callback_query_handler(func=lambda call: call.data.startswith("remadm_"))
    def remove_admin(call: CallbackQuery):
        """–£–¥–∞–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ –≥—Ä—É–ø–ø—ã"""
        parts = call.data.split("_")
        admin_username = parts[1]
        group_id = int(parts[2])
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
        group = channel_db.get_channel(group_id)
        if not group:
            bot.answer_callback_query(call.id, "–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –£–¥–∞–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        admin_db.remove_admin(admin_username, group_id)
        bot.send_message(
            call.message.chat.id,
            f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @{admin_username} —É–¥–∞–ª—ë–Ω –∏–∑ –≥—Ä—É–ø–ø—ã {group[1]}"
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        remove_admin_request(call.message)

    @bot.message_handler(commands=["clear_database"])
    def clear_database_request(message: Message):
        if message.from_user.username != SUPERADMIN_USERNAME:
            return
        
        markup = get_confirm_keyboard()
        bot.send_message(message.chat.id, "–û—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö?", reply_markup=markup)

    @bot.callback_query_handler(func=lambda call: call.data == "confirm_clear")
    def confirm_clear_database(call: CallbackQuery):
        admin_db.execute_query("DELETE FROM admins")
        
        # –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö
        data_dir = os.path.join(os.path.dirname(os.path.dirname(__file__)), 'data')
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
        for file in os.listdir(data_dir):
            if file.endswith("_trainings.db"):
                os.remove(os.path.join(data_dir, file))
                
        bot.send_message(call.message.chat.id, "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –≤—Å–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ —É–¥–∞–ª–µ–Ω—ã.")

    @bot.callback_query_handler(func=lambda call: call.data == "cancel")
    def cancel_action(call: CallbackQuery):
        bot.send_message(call.message.chat.id, "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏
    @bot.callback_query_handler(func=lambda call: call.data == "create_training")
    def create_training(call: CallbackQuery) -> None:
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
        username = call.from_user.username
        
        # –ü–æ–ª—É—á–∞–µ–º channel_id –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        channel_id = admin_db.get_admin_channel(username)
        if not channel_id:
            bot.answer_callback_query(
                call.id,
                "‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –Ω–∏ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø—ã",
                show_alert=True
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º channel_id –≤ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        training_creation_data[call.from_user.id] = TrainingData(channel_id=channel_id)
        
        msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏!")
        edit_or_create_training(msg, "create", None)

    def edit_or_create_training(message: Message, action: str, training_id: Optional[int] = None) -> None:
        msg = bot.send_message(
            message.chat.id,
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (—Ñ–æ—Ä–º–∞—Ç: 'YYYY-MM-DD HH:MM')"
        )
        bot.register_next_step_handler(msg, get_training_details, action, training_id)

    def get_training_details(message: Message, action: str, training_id: Optional[int]) -> None:
        user_id = message.from_user.id
        if user_id not in training_creation_data:
            training_creation_data[user_id] = TrainingData()
        
        try:
            validate_datetime(message.text)
            training_creation_data[user_id].date_time = message.text
            msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:")
            bot.register_next_step_handler(msg, get_max_participants, action, training_id)
        except ValidationError as e:
            bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {str(e)}")
            edit_or_create_training(message, action, training_id)

    def get_max_participants(message: Message, action: str, training_id: Optional[int]) -> None:
        user_id = message.from_user.id
        try:
            max_participants = int(message.text.strip())
            if max_participants <= 0:
                raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
            if max_participants > 50:  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ
                raise ValueError("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–º–∞–∫—Å–∏–º—É–º 50)")
                
            training_creation_data[user_id].max_participants = max_participants
            msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (–≤ –º–∏–Ω—É—Ç–∞—Ö):")
            bot.register_next_step_handler(msg, get_training_duration, action, training_id)
        except ValueError as e:
            bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {str(e)}")
            msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:")
            bot.register_next_step_handler(msg, get_max_participants, action, training_id)

    def get_training_price(message: Message, action: str, training_id: Optional[int]) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Ü–µ–Ω—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏ –ø–µ—Ä–µ–¥–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ save_training_data"""
        user_id = message.from_user.id
        try:
            price = int(message.text.strip())
            training_creation_data[user_id].price = price
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
            save_training_data(message, action, training_id)
            
        except ValueError:
            bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
            msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (–≤ —Ä—É–±–ª—è—Ö):")
            bot.register_next_step_handler(msg, get_training_price, action, training_id)

    def save_training_data(message: Message, action: str, training_id: Optional[int]) -> None:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
        user_id = message.from_user.id
        training_data = training_creation_data[user_id]
        
        try:
            trainer_db = TrainerDB(message.from_user.username)
            
            if action == "edit" and training_id:
                success = update_existing_training(trainer_db, training_id, training_data, message)
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É —Å channel_id
                training_id = trainer_db.add_training(
                    channel_id=training_data.channel_id,
                    date_time=training_data.date_time,
                    duration=training_data.duration,
                    kind=training_data.kind,
                    location=training_data.location,
                    max_participants=training_data.max_participants,
                    status="CLOSED",
                    price=training_data.price
                )
                
                if training_id:
                    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
                    training = trainer_db.get_training_details(training_id)
                    if training:
                        # –°–æ–∑–¥–∞–µ–º —Ç–µ–º—É –≤ —Ñ–æ—Ä—É–º–µ
                        topic_id = forum_manager.create_training_topic(training, message.from_user.username)
                        if topic_id:
                            trainer_db.set_topic_id(training_id, topic_id)
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ —Ç–µ–º—É
                            forum_manager.send_training_announcement(
                                training, 
                                message.from_user.username,
                                topic_id
                            )
                    
                    bot.send_message(message.chat.id, "‚úÖ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
                    success = True
                else:
                    success = False
            
            if success:
                del training_creation_data[user_id]
                show_admin_menu(message)
            
        except Exception as e:
            print(f"Error in save_training_data: {e}")
            bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏")

    def update_existing_training(trainer_db: TrainerDB, training_id: int, 
                               training_data: TrainingData, message: Message) -> bool:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∏ –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
            current_training = trainer_db.get_training_details(training_id)
            if not current_training:
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
            group = channel_db.get_channel(current_training.channel_id)
            if not group:
                bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞: –≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return False
            
            current_status = current_training.status
            old_max_participants = current_training.max_participants
            new_max_participants = training_data.max_participants
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            current_participants = trainer_db.get_participants_by_training_id(training_id)
            current_reserve = trainer_db.get_reserve_list(training_id)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
            trainer_db.update_training(
                training_id,
                training_data.date_time,
                training_data.duration,
                training_data.kind,
                training_data.location,
                training_data.max_participants,
                training_data.price,
                current_status
            )
            
            # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç —É–º–µ–Ω—å—à–∏–ª–æ—Å—å
            if new_max_participants < old_max_participants:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Å–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤ —Ä–µ–∑–µ—Ä–≤
                overflow = len(current_participants) - new_max_participants
                if overflow > 0:
                    # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —Ä–µ–∑–µ—Ä–≤
                    participants_to_reserve = current_participants[-overflow:]
                    for username in participants_to_reserve:
                        trainer_db.remove_participant(username, training_id)
                        position = trainer_db.add_to_reserve(username, training_id)
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                        if user_id := admin_db.get_user_id(username):
                            notification = (
                                "‚ö†Ô∏è –í—ã –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã –≤ —Ä–µ–∑–µ—Ä–≤ –∏–∑-–∑–∞ —É–º–µ–Ω—å—à–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–µ—Å—Ç:\n\n"
                                f"üë• –ì—Ä—É–ø–ø–∞: {group[1]}\n"
                                f"üìÖ –î–∞—Ç–∞: {current_training.date_time.strftime('%d.%m.%Y %H:%M')}\n"
                                f"üèãÔ∏è‚Äç‚ôÇÔ∏è –¢–∏–ø: {current_training.kind}\n"
                                f"üìç –ú–µ—Å—Ç–æ: {current_training.location}\n"
                                f"üìã –í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è –≤ —Ä–µ–∑–µ—Ä–≤–µ: {position}"
                            )
                            try:
                                bot.send_message(user_id, notification)
                            except Exception as e:
                                print(f"Error notifying user {username}: {e}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–º—É –≤ —Ñ–æ—Ä—É–º–µ
            topic_id = trainer_db.get_topic_id(training_id)
            if topic_id:
                training = trainer_db.get_training_details(training_id)
                forum_manager.send_training_update(training, topic_id, "edit")
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                participants = trainer_db.get_participants_by_training_id(training_id)
                forum_manager.update_participants_list(training, participants, topic_id, trainer_db)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
            notification = (
                "üìù –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –±—ã–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–∞:\n\n"
                f"üë• –ì—Ä—É–ø–ø–∞: {group[1]}\n"
                f"üìÖ –î–∞—Ç–∞: {training_data.date_time}\n"
                f"üèãÔ∏è‚Äç‚ôÇÔ∏è –¢–∏–ø: {training_data.kind}\n"
                f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {training_data.duration} –º–∏–Ω—É—Ç\n"
                f"üìç –ú–µ—Å—Ç–æ: {training_data.location}\n"
                f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {training_data.price}‚ÇΩ\n"
                f"üë• –ú–∞–∫—Å–∏–º—É–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {training_data.max_participants}"
            )
            
            for username in current_participants:
                if user_id := admin_db.get_user_id(username):
                    try:
                        bot.send_message(user_id, notification)
                    except Exception as e:
                        print(f"Error notifying user {username}: {e}")
            
            bot.reply_to(message, "‚úÖ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
            return True
        
        except Exception as e:
            print(f"Error in update_existing_training: {e}")
            bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏")
            return False

    # def create_new_training(trainer_db: TrainerDB, training_data: TrainingData, message: Message) -> bool:
    #     """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É"""
    #     try:
    #         new_training_id = trainer_db.add_training(
    #             training_data.date_time,
    #             training_data.duration,
    #             training_data.kind,
    #             training_data.location,
    #             training_data.max_participants,
    #             "CLOSED",  # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ CLOSED –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
    #             training_data.price
    #         )
            
    #         if new_training_id:
    #             # –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
    #             training = trainer_db.get_training_details(new_training_id)
    #             if training:
    #                 # –°–æ–∑–¥–∞–µ–º —Ç–µ–º—É –≤ —Ñ–æ—Ä—É–º–µ
    #                 topic_id = forum_manager.create_training_topic(training, message.from_user.username)
    #                 if topic_id:
    #                     trainer_db.set_topic_id(new_training_id, topic_id)
    #                     # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ —Ç–µ–º—É
    #                     forum_manager.send_training_announcement(
    #                         training, 
    #                         message.from_user.username,
    #                         topic_id
    #                     )
                        
    #             bot.reply_to(message, "‚úÖ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
    #             return True
    #         return False
    #     except Exception as e:
    #         print(f"Error in create_new_training: {e}")
    #         return False

    def notify_about_training_update(trainer_db: TrainerDB, training: Training, 
                                   training_id: int, message: Message) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–º—É –≤ —Ñ–æ—Ä—É–º–µ
        topic_id = trainer_db.get_topic_id(training_id)
        if topic_id:
            forum_manager.send_training_update(training, topic_id, "edit")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
        participants = trainer_db.get_participants_by_training_id(training_id)
        notification_message = create_update_notification(training)
        
        for username in participants:
            user_id = admin_db.get_user_id(username)
            if user_id and user_id != message.from_user.id:
                try:
                    bot.send_message(user_id, notification_message)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username}: {e}")

    def create_update_notification(training: Training) -> str:
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
        return (
            "üîÑ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –±—ã–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–∞:\n\n"
            f"üìÖ –î–∞—Ç–∞: {training.date_time.strftime('%d.%m.%Y %H:%M')}\n"
            f"üèãÔ∏è‚Äç‚ôÇÔ∏è –¢–∏–ø: {training.kind}\n"
            f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {training.duration} –º–∏–Ω—É—Ç\n"
            f"üìç –ú–µ—Å—Ç–æ: {training.location}\n"
            f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {training.price}‚ÇΩ"
        )

    @bot.callback_query_handler(func=lambda call: call.data == "edit_training")
    def show_trainings_for_edit(call: CallbackQuery):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        username = call.from_user.username
        
        # –ü–æ–ª—É—á–∞–µ–º channel_id –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        channel_id = admin_db.get_admin_channel(username)
        if not channel_id:
            bot.answer_callback_query(
                call.id,
                "‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –Ω–∏ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø—ã",
                show_alert=True
            )
            return
        
        trainer_db = TrainerDB(username)
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –¥–ª—è –¥–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã
        trainings = trainer_db.get_trainings_for_channel(channel_id)
        
        if not trainings:
            bot.send_message(call.message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
        
        markup = get_trainings_keyboard(trainings, "edit")
        
        bot.send_message(
            call.message.chat.id,
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
            reply_markup=markup
        )

    @bot.callback_query_handler(func=lambda call: call.data.startswith("edit_"))
    def start_edit_training(call: CallbackQuery):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
        username = call.from_user.username
        
        # –ü–æ–ª—É—á–∞–µ–º channel_id –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        channel_id = admin_db.get_admin_channel(username)
        if not channel_id:
            bot.answer_callback_query(
                call.id,
                "‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –Ω–∏ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø—ã",
                show_alert=True
            )
            return
        
        training_id = int(call.data.split("_")[1])
        trainer_db = TrainerDB(call.from_user.username)
        training = trainer_db.get_training_details(training_id)
        
        if not training:
            bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞: —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
            
        msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏")
        edit_or_create_training(msg, "edit", training_id)

    @bot.callback_query_handler(func=lambda call: call.data == "delete_training")
    def show_trainings_for_delete(call: CallbackQuery):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
        username = call.from_user.username
        
        # –ü–æ–ª—É—á–∞–µ–º channel_id –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        channel_id = admin_db.get_admin_channel(username)
        if not channel_id:
            bot.answer_callback_query(
                call.id,
                "‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –Ω–∏ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø—ã",
                show_alert=True
            )
            return
        
        trainer_db = TrainerDB(call.from_user.username)
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –¥–ª—è –¥–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã
        trainings = trainer_db.get_trainings_for_channel(channel_id)
        
        if not trainings:
            bot.send_message(call.message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return
        
        markup = get_trainings_keyboard(trainings, "delete")
        
        bot.send_message(
            call.message.chat.id,
            "‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=markup
        )

    @bot.callback_query_handler(func=lambda call: call.data.startswith("delete_"))
    def apply_remove(call: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
        try:
            training_id = int(call.data.split("_")[1])
            trainer_db = TrainerDB(call.from_user.username)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ –∏ —Ç–æ–ø–∏–∫–µ –¥–æ —É–¥–∞–ª–µ–Ω–∏—è
            training = trainer_db.get_training_details(training_id)
            topic_id = trainer_db.get_topic_id(training_id)
            
            if not training:
                bot.answer_callback_query(call.id, "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
            group = channel_db.get_channel(training.channel_id)
            if not group:
                bot.answer_callback_query(call.id, "–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
            participants = trainer_db.get_participants_by_training_id(training_id)
            
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —É–¥–∞–ª–∏—Ç—å —Ç–µ–º—É –≤ —Ñ–æ—Ä—É–º–µ
            if topic_id:
                try:
                    print(f"Attempting to delete forum topic {topic_id} in channel {training.channel_id}")
                    try:
                        # –ü—Ä–æ–±—É–µ–º —É–¥–∞–ª–∏—Ç—å —Ç–µ–º—É
                        print("Attempting to delete topic...")
                        result = bot.delete_forum_topic(training.channel_id, topic_id)
                        print(f"Delete topic result: {result}")
                    except Exception as e:
                        print(f"Error deleting topic: {e}")
                        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å, –ø—Ä–æ–±—É–µ–º –∑–∞–∫—Ä—ã—Ç—å
                        try:
                            print("Attempting to close topic instead...")
                            bot.edit_forum_topic(
                                training.channel_id,
                                topic_id,
                                name=f"[–£–î–ê–õ–ï–ù–û] {training.kind}"
                            )
                            bot.close_forum_topic(training.channel_id, topic_id)
                            print("Topic closed successfully")
                        except Exception as close_error:
                            print(f"Error closing topic: {close_error}")
                except Exception as e:
                    print(f"Error handling forum topic: {e}")
            
            # –ó–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            print("Deleting training from database...")
            if trainer_db.delete_training(training_id):
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
                notification = (
                    "‚ùå –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞:\n\n"
                    f"üë• –ì—Ä—É–ø–ø–∞: {group[1]}\n"
                    f"üìÖ –î–∞—Ç–∞: {training.date_time.strftime('%d.%m.%Y %H:%M')}\n"
                    f"üèãÔ∏è‚Äç‚ôÇÔ∏è –¢–∏–ø: {training.kind}\n"
                    f"üìç –ú–µ—Å—Ç–æ: {training.location}"
                )
                
                for username in participants:
                    if user_id := admin_db.get_user_id(username):
                        try:
                            bot.send_message(user_id, notification)
                        except Exception as e:
                            print(f"Error notifying user {username}: {e}")

                for username, _, _ in trainer_db.get_reserve_list(training_id):
                    if user_id := admin_db.get_user_id(username):
                        try:
                            bot.send_message(user_id, notification)
                        except Exception as e:
                            print(f"Error notifying user {username}: {e}")
                
                bot.answer_callback_query(call.id, "‚úÖ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞")
                bot.delete_message(call.message.chat.id, call.message.message_id)
            else:
                print("Error deleting training from database")
                bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏")
            
        except Exception as e:
            print(f"Error in apply_remove: {e}")
            bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏")

    @bot.callback_query_handler(func=lambda call: call.data == "open_training_sign_up")
    def show_trainings_for_opening(call: CallbackQuery):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–∫—Ä—ã—Ç—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∑–∞–ø–∏—Å–∏"""
        username = call.from_user.username
        
        # –ü–æ–ª—É—á–∞–µ–º channel_id –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        channel_id = admin_db.get_admin_channel(username)
        if not channel_id:
            bot.answer_callback_query(
                call.id,
                "‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –Ω–∏ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø—ã",
                show_alert=True
            )
            return
        
        trainer_db = TrainerDB(username)
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫—Ä—ã—Ç—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –¥–ª—è –¥–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã
        trainings = trainer_db.get_trainings_for_channel(channel_id)
        closed_trainings = [t for t in trainings if t.status != "OPEN"]
        
        if not closed_trainings:
            bot.send_message(call.message.chat.id, "–ù–µ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ —Å –∑–∞–∫—Ä—ã—Ç–æ–π –∑–∞–ø–∏—Å—å—é")
            return
        
        markup = get_trainings_keyboard(closed_trainings, "open_sign_up")
        
        bot.send_message(
            call.message.chat.id,
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∑–∞–ø–∏—Å–∏:",
            reply_markup=markup
        )

    @bot.callback_query_handler(func=lambda call: call.data.startswith("open_sign_up_"))
    def open_training(call: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫—Ä—ã—Ç–∏—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É"""
        try:
            training_id = int(call.data.split("_")[-1])
            username = call.from_user.username
            trainer_db = TrainerDB(username)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ
            training = trainer_db.get_training_details(training_id)
            if not training:
                bot.answer_callback_query(call.id, "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
            group = channel_db.get_channel(training.channel_id)
            if not group:
                bot.answer_callback_query(call.id, "–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–≤—Ç–æ–∑–∞–ø–∏—Å–∏
            process_auto_signups(trainer_db, training)
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∑–∞–ø–∏—Å—å
            trainer_db.set_training_open(training_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —Ñ–æ—Ä—É–º
            topic_id = trainer_db.get_topic_id(training_id)
            if topic_id:
                forum_manager.send_training_update(training, topic_id, "open")
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                participants = trainer_db.get_participants_by_training_id(training_id)
                forum_manager.update_participants_list(training, participants, topic_id, trainer_db)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã
            payment_details = admin_db.get_payment_details(username)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            users = admin_db.get_all_users()
            notification = (
                f"üü¢ –û—Ç–∫—Ä—ã—Ç–∞ –∑–∞–ø–∏—Å—å –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É!\n\n"
                f"üë• –ì—Ä—É–ø–ø–∞: {group[1]}\n"
                f"üìÖ –î–∞—Ç–∞: {training.date_time.strftime('%d.%m.%Y %H:%M')}\n"
                f"üèãÔ∏è‚Äç‚ôÇÔ∏è –¢–∏–ø: {training.kind}\n"
                f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {training.duration} –º–∏–Ω—É—Ç\n"
                f"üìç –ú–µ—Å—Ç–æ: {training.location}\n"
                f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {training.price}‚ÇΩ\n"
                f"üë• –ú–∞–∫—Å–∏–º—É–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {training.max_participants}\n"
                f"\nüí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n{payment_details}"
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–ø–∏—Å–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º callback_data
            markup = InlineKeyboardMarkup()
            markup.add(InlineKeyboardButton(
                "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è",
                callback_data=f"signup_training_{username}_{training_id}"  # –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            ))
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –∫—Ä–æ–º–µ —Ç–µ—Ö, –∫—Ç–æ —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω —á–µ—Ä–µ–∑ –∞–≤—Ç–æ–∑–∞–ø–∏—Å—å
            auto_signup_users = trainer_db.get_auto_signup_requests(training_id)
            print(auto_signup_users)
            for user in users:                
                user_info = admin_db.get_user_info(user[0])
                try:
                    if user_info and user_info.username not in auto_signup_users and not user_info.is_admin:
                        bot.send_message(user[0], notification, reply_markup=markup)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user[1]}: {e}")

                if user_info.username in auto_signup_users:
                    trainer_db.remove_auto_signup_request(user_info.username, training.id)
            
            bot.send_message(call.from_user.id, "‚úÖ –ó–∞–ø–∏—Å—å –æ—Ç–∫—Ä—ã—Ç–∞")
            bot.delete_message(call.message.chat.id, call.message.message_id)
            
        except Exception as e:
            print(f"Error in open_training: {e}")
            bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∑–∞–ø–∏—Å–∏")

    @bot.message_handler(commands=["stats"])
    def show_statistics(message: Message):
        username = message.from_user.username
        if not username:
            bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à username")
            return
            
        # –ü–æ–ª—É—á–∞–µ–º channel_id –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        channel_id = admin_db.get_admin_channel(username)
        if not channel_id:
            bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
    
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
        group = channel_db.get_channel(channel_id)
        if not group:
            bot.reply_to(message, "‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
    
        trainer_db = TrainerDB(username)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –¥–ª—è –¥–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã
        trainings = trainer_db.get_trainings_for_channel(channel_id)
        
        total_stats = {
            'total_trainings': len(trainings),
            'total_participants': 0,
            'active_trainings': 0,
            'participants_by_training': {}
        }
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º
        for training in trainings:
            participants = trainer_db.get_participants_by_training_id(training.id)
            total_stats['participants_by_training'][training.id] = len(participants)
            total_stats['total_participants'] += len(participants)
            if training.status == 'OPEN':
                total_stats['active_trainings'] += 1
        
        stats_message = (
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥—Ä—É–ø–ø—ã {group[1]}:\n\n"
            f"–í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {total_stats['total_trainings']}\n"
            f"–ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {total_stats['active_trainings']}\n"
            f"–í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö: {total_stats['total_participants']}\n\n"
            "–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:\n"
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
        recent_trainings = sorted(trainings, key=lambda t: t.date_time, reverse=True)[:5]
        
        for training in recent_trainings:
            participants_count = total_stats['participants_by_training'].get(training.id, 0)
            stats_message += (
                f"\nüìÖ {training.date_time.strftime('%d.%m.%Y %H:%M')}\n"
                f"üèãÔ∏è‚Äç‚ôÇÔ∏è {training.kind}\n"
                f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {participants_count}/{training.max_participants}\n"
                f"üìù –°—Ç–∞—Ç—É—Å: {'–û—Ç–∫—Ä—ã—Ç–∞' if training.status == 'OPEN' else '–ó–∞–∫—Ä—ã—Ç–∞'}\n"
                "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ"
            )
        
        bot.send_message(message.chat.id, stats_message)

    # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
    @bot.callback_query_handler(func=lambda call: call.data.startswith("signup_training_"))
    def process_training_signup(call: CallbackQuery):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø–∏—Å—å –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É"""
        parts = call.data.split("_")
        admin_username = parts[2]
        training_id = int(parts[3])
        username = call.from_user.username
        
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü—É users
        admin_db.execute_query(
            "INSERT OR IGNORE INTO users (username, user_id) VALUES (?, ?)",
            (username, call.from_user.id)
        )
        
        trainer_db = TrainerDB(admin_username)

        if trainer_db.get_training_details(training_id).status == "CLOSED":
            bot.send_message(call.message.chat.id, "‚ùå –≠—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏")
            return

        if trainer_db.add_participant(username, training_id):
            bot.send_message(call.message.chat.id, "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É!")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —Ç–µ–º–µ
            if topic_id := trainer_db.get_topic_id(training_id):
                training = trainer_db.get_training_details(training_id)
                participants = trainer_db.get_participants_by_training_id(training_id)
                forum_manager.update_participants_list(training, participants, topic_id, trainer_db)
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–∏—Å–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            existing = trainer_db.fetch_one('''
                SELECT 1 FROM participants 
                WHERE username = ? AND training_id = ?
            ''', (username, training_id))
            
            if existing:
                message = "‚ùå –í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É!"
            else:
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ä–µ–∑–µ—Ä–≤
                position = trainer_db.add_to_reserve(username, training_id)
                message = f"‚ÑπÔ∏è –í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Ä–µ–∑–µ—Ä–≤ –Ω–∞ –ø–æ–∑–∏—Ü–∏—é {position}"
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤ —Ç–µ–º–µ
                if topic_id := trainer_db.get_topic_id(training_id):
                    training = trainer_db.get_training_details(training_id)
                    participants = trainer_db.get_participants_by_training_id(training_id)
                    forum_manager.update_participants_list(training, participants, topic_id, trainer_db)
                
            bot.send_message(call.message.chat.id, message)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
        bot.delete_message(call.message.chat.id, call.message.message_id)

    def offer_spot_to_reserve(training_id: int, admin_username: str):
        """–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –º–µ—Å—Ç–æ —Å–ª–µ–¥—É—é—â–µ–º—É –≤ —Ä–µ–∑–µ—Ä–≤–µ"""
        trainer_db = TrainerDB(admin_username)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤ —Ä–µ–∑–µ—Ä–≤–µ
        if next_user := trainer_db.offer_spot_to_next_in_reserve(training_id):
            training = trainer_db.get_training_details(training_id)
            
            markup = InlineKeyboardMarkup()
            markup.add(
                InlineKeyboardButton("–ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_reserve_{training_id}"),
                InlineKeyboardButton("–û—Ç–∫–∞–∑–∞—Ç—å—Å—è", callback_data=f"decline_reserve_{training_id}")
            )
            
            message = (
                "üéâ –û—Å–≤–æ–±–æ–¥–∏–ª–æ—Å—å –º–µ—Å—Ç–æ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ!\n\n"
                f"–í—ã –ø–µ—Ä–≤—ã–π –≤ —Å–ø–∏—Å–∫–µ —Ä–µ–∑–µ—Ä–≤–∞ –∏ –º–æ–∂–µ—Ç–µ –∑–∞–Ω—è—Ç—å –æ—Å–≤–æ–±–æ–¥–∏–≤—à–µ–µ—Å—è –º–µ—Å—Ç–æ.\n\n"
                f"üìÖ –î–∞—Ç–∞: {training.date_time.strftime('%d.%m.%Y %H:%M')}\n"
                f"üèãÔ∏è‚Äç‚ôÇÔ∏è –¢–∏–ø: {training.kind}\n"
                f"üìç –ú–µ—Å—Ç–æ: {training.location}\n\n"
                "‚è∞ –£ –≤–∞—Å –µ—Å—Ç—å 2 —á–∞—Å–∞, —á—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å –∏–ª–∏ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –º–µ—Å—Ç–∞"
            )
            
            # –ü–æ–ª—É—á–∞–µ–º user_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ä–µ–∑–µ—Ä–≤–∞
            user = admin_db.fetch_one(
                "SELECT user_id FROM users WHERE username = ?",
                (next_user,)
            )
            
            if user:
                try:
                    bot.send_message(user[0], message, reply_markup=markup)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{next_user}: {e}")

    @bot.callback_query_handler(func=lambda call: call.data.startswith(("accept_reserve_", "decline_reserve_")) and "invite" not in call.data)
    def handle_reserve_response(call: CallbackQuery):
        parts = call.data.split("_")
        action = parts[0]  # "accept" –∏–ª–∏ "decline"
        training_id = int(parts[2])
        username = call.from_user.username
        
        admin_username = find_training_admin(training_id)
        if not admin_username:
            bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞: —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        trainer_db = TrainerDB(admin_username)
        
        if action == "accept":
            if trainer_db.accept_reserve_spot(username, training_id):
                bot.send_message(call.message.chat.id, "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É!")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤ —Ñ–æ—Ä—É–º–µ
                if topic_id := trainer_db.get_topic_id(training_id):
                    training = trainer_db.get_training_details(training_id)
                    participants = trainer_db.get_participants_by_training_id(training_id)
                    forum_manager.update_participants_list(training, participants, topic_id, trainer_db)
            else:
                bot.send_message(call.message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É")
        else:
            # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ —Ä–µ–∑–µ—Ä–≤–∞
            trainer_db.remove_participant(username, training_id)
            trainer_db.remove_from_reserve(username, training_id)
            bot.send_message(call.message.chat.id, "–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –º–µ—Å—Ç–∞ –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ")
            
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –º–µ—Å—Ç–æ —Å–ª–µ–¥—É—é—â–µ–º—É
            offer_spot_to_reserve(training_id, admin_username)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤ —Ñ–æ—Ä—É–º–µ
            if topic_id := trainer_db.get_topic_id(training_id):
                training = trainer_db.get_training_details(training_id)
                participants = trainer_db.get_participants_by_training_id(training_id)
                forum_manager.update_participants_list(training, participants, topic_id, trainer_db)
        bot.delete_message(call.message.chat.id, call.message.message_id)

    def get_training_duration(message: Message, action: str, training_id: Optional[int]) -> None:
        user_id = message.from_user.id
        try:
            duration = validate_duration(message.text)
            training_creation_data[user_id].duration = duration
            msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:")
            bot.register_next_step_handler(msg, get_training_type, action, training_id)
        except ValidationError as e:
            bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {str(e)}")
            msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (–≤ –º–∏–Ω—É—Ç–∞—Ö):")
            bot.register_next_step_handler(msg, get_training_duration, action, training_id)

    def get_training_type(message: Message, action: str, training_id: Optional[int]) -> None:
        user_id = message.from_user.id
        try:
            training_kind = validate_kind(message.text)
            training_creation_data[user_id].kind = training_kind
            msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:")
            bot.register_next_step_handler(msg, get_training_location, action, training_id)
        except ValidationError as e:
            bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {str(e)}")
            msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:")
            bot.register_next_step_handler(msg, get_training_type, action, training_id)

    def get_training_location(message: Message, action: str, training_id: Optional[int]) -> None:
        user_id = message.from_user.id
        try:
            location = validate_location(message.text)
            training_creation_data[user_id].location = location
            msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (–≤ —Ä—É–±–ª—è—Ö):")
            bot.register_next_step_handler(msg, get_training_price, action, training_id)
        except ValidationError as e:
            bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {str(e)}")
            msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:")
            bot.register_next_step_handler(msg, get_training_location, action, training_id)

    @bot.callback_query_handler(func=lambda call: call.data.startswith("confirm_payment_"))
    def confirm_payment(call: CallbackQuery):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
        try:
            parts = call.data.split("_")
            training_id = int(parts[2])
            username = parts[3]
            
            trainer_db = TrainerDB(call.from_user.username)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ
            training = trainer_db.get_training_details(training_id)
            if not training:
                bot.answer_callback_query(call.id, "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
            group = channel_db.get_channel(training.channel_id)
            if not group:
                bot.answer_callback_query(call.id, "–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–ø–ª–∞—Ç—É
            if trainer_db.confirm_payment(username, training_id):
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                if user_id := admin_db.get_user_id(username):
                    notification = (
                        "‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\n"
                        f"üë• –ì—Ä—É–ø–ø–∞: {group[1]}\n"
                        f"üìÖ –î–∞—Ç–∞: {training.date_time.strftime('%d.%m.%Y %H:%M')}\n"
                        f"üèãÔ∏è‚Äç‚ôÇÔ∏è –¢–∏–ø: {training.kind}\n"
                        f"üìç –ú–µ—Å—Ç–æ: {training.location}"
                    )
                    try:
                        bot.send_message(user_id, notification)
                    except Exception as e:
                        print(f"Error notifying user {username}: {e}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤ —Ñ–æ—Ä—É–º–µ
                if topic_id := trainer_db.get_topic_id(training_id):
                    participants = trainer_db.get_participants_by_training_id(training_id)
                    forum_manager.update_participants_list(training, participants, topic_id, trainer_db)
                
                bot.answer_callback_query(call.id, "‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞")
                bot.delete_message(call.message.chat.id, call.message.message_id)
            else:
                bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã")
            
        except Exception as e:
            print(f"Error in confirm_payment: {e}")
            bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã")

    def process_payment_details(message: Message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã"""
        admin_db.set_payment_details(message.from_user.username, message.text)
        bot.reply_to(message, "‚úÖ –†–µ–∫–≤–∏–∑–∏—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")

    @bot.callback_query_handler(func=lambda call: call.data == "set_payment_details")
    def set_payment_details_callback(call: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤"""
        username = call.from_user.username
        channel_id = admin_db.get_admin_channel(username)
        if not channel_id:
            return
        
        msg = bot.send_message(call.message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:")
        bot.register_next_step_handler(msg, process_payment_details)

    @bot.message_handler(commands=["create_test_training"])
    def create_test_training(message: Message):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É —Å 17 —Ç–µ—Å—Ç–æ–≤—ã–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏"""
        username = message.from_user.username
        
        # –ü–æ–ª—É—á–∞–µ–º channel_id –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        channel_id = admin_db.get_admin_channel(username)
        if not channel_id:
            bot.reply_to(message, "‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –Ω–∏ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø—ã")
            return
            
        trainer_db = TrainerDB(username)
        # –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É —á–µ—Ä–µ–∑ —á–∞—Å –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        test_time = (datetime.now() + timedelta(hours=1)).strftime('%Y-%m-%d %H:%M')
        
        training_id = trainer_db.add_training(
            channel_id=channel_id,  # –î–æ–±–∞–≤–ª—è–µ–º channel_id
            date_time=test_time,
            duration=60,
            kind="–¢–µ—Å—Ç–æ–≤–∞—è",
            location="–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ª",
            max_participants=18,
            status="OPEN",
            price=1000
        )
        
        if training_id:
            # –î–æ–±–∞–≤–ª—è–µ–º 17 —Ç–µ—Å—Ç–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            for i in range(17):
                test_username = f"test_user_{i+1}"
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö users
                admin_db.execute_query(
                    "INSERT OR IGNORE INTO users (username, user_id) VALUES (?, ?)",
                    (test_username, 1000000 + i)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ user_id –Ω–∞—á–∏–Ω–∞—è —Å 1000000
                )
                trainer_db.add_participant(test_username, training_id)
            
            training = trainer_db.get_training_details(training_id)
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ–º—É –≤ —Ñ–æ—Ä—É–º–µ
            topic_id = forum_manager.create_training_topic(training, message.from_user.username)
            if topic_id:
                trainer_db.set_topic_id(training_id, topic_id)
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ —Ç–µ–º—É
                forum_manager.send_training_announcement(training, message.from_user.username, topic_id)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                participants = trainer_db.get_participants_by_training_id(training_id)
                forum_manager.update_participants_list(training, participants, topic_id, trainer_db)
            
            bot.reply_to(
                message,
                f"‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å 17 —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –∏–∑ 18 –≤–æ–∑–º–æ–∂–Ω—ã—Ö!"
            )
        else:
            bot.reply_to(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É")
            
    @bot.message_handler(commands=["remove_test_participant"])
    def remove_test_participant(message: Message):
        """–£–¥–∞–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
        if not admin_db.is_admin(message.from_user.username):
            return
            
        trainer_db = TrainerDB(message.from_user.username)
        
        # –ù–∞—Ö–æ–¥–∏–º —Ç–µ—Å—Ç–æ–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
        test_trainings = trainer_db.fetch_all('''
            SELECT training_id FROM schedule 
            WHERE kind = '–¢–µ—Å—Ç–æ–≤–∞—è' 
            ORDER BY date_time DESC 
            LIMIT 1
        ''')
        
        if not test_trainings:
            bot.reply_to(message, "‚ùå –¢–µ—Å—Ç–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
            
        training_id = test_trainings[0][0]
        participants = trainer_db.get_participants_by_training_id(training_id)
        test_participants = [p for p in participants if p.startswith("test_user_")]
        
        if test_participants:
            # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
            trainer_db.remove_participant(test_participants[-1], training_id)
            
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –º–µ—Å—Ç–æ —Å–ª–µ–¥—É—é—â–µ–º—É –≤ —Ä–µ–∑–µ—Ä–≤–µ
            offer_spot_to_reserve(training_id, message.from_user.username)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤ —Ñ–æ—Ä—É–º–µ
            if topic_id := trainer_db.get_topic_id(training_id):
                training = trainer_db.get_training_details(training_id)
                updated_participants = trainer_db.get_participants_by_training_id(training_id)
                forum_manager.update_participants_list(training, updated_participants, topic_id, trainer_db)
            
            bot.reply_to(message, f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ @{test_participants[-1]} —É–¥–∞–ª–µ–Ω")
        else:
            bot.reply_to(message, "‚ùå –¢–µ—Å—Ç–æ–≤—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

    @bot.message_handler(commands=["add_test_participant"])
    def add_test_participant(message: Message):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ —Ç–µ—Å—Ç–æ–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É"""
        if not admin_db.is_admin(message.from_user.username):
            return
            
        trainer_db = TrainerDB(message.from_user.username)
        
        # –ù–∞—Ö–æ–¥–∏–º —Ç–µ—Å—Ç–æ–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
        test_trainings = trainer_db.fetch_all('''
            SELECT training_id FROM schedule 
            WHERE kind = '–¢–µ—Å—Ç–æ–≤–∞—è' 
            ORDER BY date_time DESC 
            LIMIT 1
        ''')
        
        if not test_trainings:
            bot.reply_to(message, "‚ùå –¢–µ—Å—Ç–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
            
        training_id = test_trainings[0][0]
        participants = trainer_db.get_participants_by_training_id(training_id)
        
        if len(participants) >= 18:
            bot.reply_to(message, "‚ùå –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞")
            return
            
        # –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–∏–π –Ω–æ–º–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        test_participants = [p for p in participants if p.startswith("test_user_")]
        next_number = len(test_participants) + 1
        new_test_user = f"test_user_{next_number}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö users
        admin_db.execute_query(
            "INSERT OR IGNORE INTO users (username, user_id) VALUES (?, ?)",
            (new_test_user, 1000000 + next_number)
        )
        
        trainer_db.add_participant(new_test_user, training_id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤ —Ñ–æ—Ä—É–º–µ
        if topic_id := trainer_db.get_topic_id(training_id):
            training = trainer_db.get_training_details(training_id)
            updated_participants = trainer_db.get_participants_by_training_id(training_id)
            forum_manager.update_participants_list(training, updated_participants, topic_id, trainer_db)
        
        bot.reply_to(message, f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ @{new_test_user}")

    @bot.callback_query_handler(func=lambda call: call.data.startswith("mark_paid_"))
    def mark_paid(call: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–û–ø–ª–∞—Ç–∏–ª'"""
        training_id = int(call.data.split("_")[2])
        username = call.from_user.username
        
        # –ù–∞—Ö–æ–¥–∏–º –∞–¥–º–∏–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        admin_username = find_training_admin(training_id)
        
        if not admin_username:
            bot.delete_message(call.message.chat.id, call.message.message_id)
            bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞: —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –∞–¥–º–∏–Ω–∞
        payment_details = admin_db.get_payment_details(admin_username)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –∏ –ø—Ä–æ—Å–∏–º —Å–∫—Ä–∏–Ω—à–æ—Ç
        message = (
            "üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n"
            f"{payment_details}\n\n"
            "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
        )
        bot.send_message(call.message.chat.id, message)
        bot.delete_message(call.message.chat.id, call.message.message_id)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
        bot.register_next_step_handler(call.message, process_payment_screenshot, training_id, admin_username)

    def process_payment_screenshot(message: Message, training_id: int, admin_username: str):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã"""
        if not message.photo:
            bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã")
            return
        
        username = message.from_user.username
        trainer_db = TrainerDB(admin_username)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å "–æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
        trainer_db.set_payment_status(username, training_id, 1)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∞–¥–º–∏–Ω–∞
        markup = InlineKeyboardMarkup()
        markup.add(
            InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_payment_{training_id}_{username}"),
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_payment_{training_id}_{username}")
        )
        
        # –ü–æ–ª—É—á–∞–µ–º user_id –∞–¥–º–∏–Ω–∞
        admin_user_id = admin_db.get_user_id(admin_username)
        
        if admin_user_id:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –∞–¥–º–∏–Ω—É
            bot.send_photo(
                admin_user_id,
                message.photo[-1].file_id,
                caption=f"–°–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã –æ—Ç @{username} –∑–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É #{training_id}",
                reply_markup=markup
            )
            
            bot.reply_to(message, "‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —Ñ–æ—Ä—É–º–µ
            if topic_id := trainer_db.get_topic_id(training_id):
                training = trainer_db.get_training_details(training_id)
                participants = trainer_db.get_participants_by_training_id(training_id)
                forum_manager.update_participants_list(training, participants, topic_id, trainer_db)

    @bot.callback_query_handler(func=lambda call: call.data == "set_invite_limit")
    def set_invite_limit_handler(call: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ª–∏–º–∏—Ç–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π"""
        username = call.from_user.username
        
        # –ü–æ–ª—É—á–∞–µ–º channel_id –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        channel_id = admin_db.get_admin_channel(username)
        if not channel_id:
            bot.answer_callback_query(
                call.id,
                "‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –Ω–∏ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø—ã",
                show_alert=True
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
        group = channel_db.get_channel(channel_id)
        if not group:
            bot.answer_callback_query(call.id, "‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        current_limit = admin_db.get_invite_limit(username)
        msg = bot.send_message(
            call.message.chat.id,
            f"–ì—Ä—É–ø–ø–∞: {group[1]}\n"
            f"–¢–µ–∫—É—â–∏–π –ª–∏–º–∏—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π: {current_limit}\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ª–∏–º–∏—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (0 - –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π):"
        )
        bot.register_next_step_handler(msg, process_invite_limit, channel_id)

    def process_invite_limit(message: Message, channel_id: int):
        try:
            limit = int(message.text.strip())
            if limit < 0:
                raise ValueError("–õ–∏–º–∏—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º")
        
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
            group = channel_db.get_channel(channel_id)
            if not group:
                bot.reply_to(message, "‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
        
            admin_db.set_invite_limit(message.from_user.username, limit)
            bot.reply_to(
                message,
                f"‚úÖ –î–ª—è –≥—Ä—É–ø–ø—ã {group[1]} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω "
                f"{'–±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π' if limit == 0 else f'–ª–∏–º–∏—Ç –≤ {limit}'} "
                "–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
            )
        except ValueError:
            bot.reply_to(message, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")

    def show_admin_menu(message: Message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        username = message.from_user.username
        
        # –ü–æ–ª—É—á–∞–µ–º channel_id –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        channel_id = admin_db.get_admin_channel(username)
        if not channel_id:
            bot.reply_to(message, "‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –Ω–∏ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø—ã")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
        group = channel_db.get_channel(channel_id)
        if not group:
            bot.reply_to(message, "‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        markup = InlineKeyboardMarkup()
        markup.row(
            InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å", callback_data="create_training"),
            InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="edit_training")
        )
        markup.row(
            InlineKeyboardButton("üîì –û—Ç–∫—Ä—ã—Ç—å –∑–∞–ø–∏—Å—å", callback_data="open_training_sign_up"),
            InlineKeyboardButton("üîí –ó–∞–∫—Ä—ã—Ç—å –∑–∞–ø–∏—Å—å", callback_data="close_training")
        )
        markup.row(
            InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data="delete_training"),
            InlineKeyboardButton("üìä –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="get_schedule")
        )
        markup.add(InlineKeyboardButton("üë§ –£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞", callback_data="remove_participant"))
        markup.add(InlineKeyboardButton("üí≥ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã", callback_data="set_payment_details"))
        markup.add(InlineKeyboardButton("üë• –õ–∏–º–∏—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π", callback_data="set_invite_limit"))
        
        bot.send_message(
            message.chat.id,
            f"üë• –ì—Ä—É–ø–ø–∞: {group[1]}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=markup
        )

    @bot.callback_query_handler(func=lambda call: call.data == "admin_list")
    def show_admin_list(call: CallbackQuery):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
        username = call.from_user.username
        channel_id = admin_db.get_admin_channel(username)
        if not channel_id:
            return
        
        admins = admin_db.get_all_admins()
        if not admins:
            bot.send_message(call.message.chat.id, "–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø—É—Å—Ç")
            return
            
        message = "üëÆ‚Äç‚ôÇÔ∏è –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:\n\n"
        for admin in admins:
            message += f"@{admin[0]}\n"
            
        bot.send_message(call.message.chat.id, message)

    @bot.callback_query_handler(func=lambda call: call.data == "remove_participant")
    def show_trainings_for_participant_removal(call: CallbackQuery):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
        username = call.from_user.username
        
        # –ü–æ–ª—É—á–∞–µ–º channel_id –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        channel_id = admin_db.get_admin_channel(username)
        if not channel_id:
            bot.answer_callback_query(
                call.id,
                "‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –Ω–∏ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø—ã",
                show_alert=True
            )
            return
        
        trainer_db = TrainerDB(call.from_user.username)
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –¥–ª—è –¥–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã
        trainings = trainer_db.get_trainings_for_channel(channel_id)
        trainings_with_participants = []
        
        for training in trainings:
            if trainer_db.get_participants_by_training_id(training.id):
                trainings_with_participants.append(training)
        
        if not trainings_with_participants:
            bot.send_message(call.message.chat.id, "–ù–µ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏")
            return
        
        markup = get_trainings_keyboard(trainings_with_participants, "select_training_remove_participant")
        
        bot.send_message(
            call.message.chat.id,
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞:",
            reply_markup=markup
        )

    @bot.callback_query_handler(func=lambda call: call.data.startswith("select_training_remove_participant_"))
    def show_participants_for_removal(call: CallbackQuery):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
        training_id = int(call.data.split("_")[-1])
        trainer_db = TrainerDB(call.from_user.username)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ
        training = trainer_db.get_training_details(training_id)
        if not training:
            bot.answer_callback_query(call.id, "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
        group = channel_db.get_channel(training.channel_id)
        if not group:
            bot.answer_callback_query(call.id, "–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        participants = trainer_db.get_participants_by_training_id(training_id)
        if not participants:
            bot.send_message(call.message.chat.id, "–ù–∞ —ç—Ç–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
            return
        
        markup = InlineKeyboardMarkup()
        for username in participants:
            markup.add(InlineKeyboardButton(
                f"‚ùå @{username}",
                callback_data=f"remove_participant_{training_id}_{username}"
            ))
        
        bot.send_message(
            call.message.chat.id,
            f"–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –≤ –≥—Ä—É–ø–ø–µ {group[1]}:\n"
            f"üìÖ {training.date_time.strftime('%d.%m.%Y %H:%M')}\n"
            f"üèãÔ∏è‚Äç‚ôÇÔ∏è {training.kind}\n"
            f"üìç {training.location}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=markup
        )

    @bot.callback_query_handler(func=lambda call: call.data.startswith("remove_participant_"))
    def request_removal_reason(call: CallbackQuery):
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–∏—á–∏–Ω—É —É–¥–∞–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
        parts = call.data.split("_")
        training_id = int(parts[2])
        username = parts[3]
        
        msg = bot.send_message(
            call.message.chat.id,
            f"–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É —É–¥–∞–ª–µ–Ω–∏—è @{username}:"
        )
        bot.register_next_step_handler(msg, process_participant_removal, training_id, username)

    @bot.callback_query_handler(func=lambda call: call.data == "close_training")
    def show_trainings_for_closing(call: CallbackQuery):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –∑–∞–ø–∏—Å–∏"""
        username = call.from_user.username
        
        # –ü–æ–ª—É—á–∞–µ–º channel_id –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        channel_id = admin_db.get_admin_channel(username)
        if not channel_id:
            bot.answer_callback_query(
                call.id,
                "‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –Ω–∏ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø—ã",
                show_alert=True
            )
            return
        
        trainer_db = TrainerDB(username)
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –¥–ª—è –¥–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã
        trainings = trainer_db.get_trainings_for_channel(channel_id)
        open_trainings = [t for t in trainings if t.status == "OPEN"]
        
        if not open_trainings:
            bot.send_message(call.message.chat.id, "–ù–µ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ —Å –æ—Ç–∫—Ä—ã—Ç–æ–π –∑–∞–ø–∏—Å—å—é")
            return
        
        markup = get_trainings_keyboard(open_trainings, "close_sign_up")
        
        bot.send_message(
            call.message.chat.id,
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –∑–∞–ø–∏—Å–∏:",
            reply_markup=markup
        )

    @bot.callback_query_handler(func=lambda call: call.data.startswith("close_sign_up_"))
    def close_training(call: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É"""
        try:
            training_id = int(call.data.split("_")[-1])
            trainer_db = TrainerDB(call.from_user.username)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ
            training = trainer_db.get_training_details(training_id)
            if not training:
                bot.answer_callback_query(call.id, "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
            group = channel_db.get_channel(training.channel_id)
            if not group:
                bot.answer_callback_query(call.id, "–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–æ –∑–∞–∫—Ä—ã—Ç–∏—è
            participants = trainer_db.get_participants_by_training_id(training_id)
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∑–∞–ø–∏—Å—å (—ç—Ç–æ —Ç–∞–∫–∂–µ –æ—á–∏—Å—Ç–∏—Ç —Å–ø–∏—Å–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤)
            trainer_db.set_training_closed(training_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —Ñ–æ—Ä—É–º
            topic_id = trainer_db.get_topic_id(training_id)
            if topic_id:
                forum_manager.send_training_update(training, topic_id, "close")
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (—Ç–µ–ø–µ—Ä—å –ø—É—Å—Ç–æ–π) –≤ —Ñ–æ—Ä—É–º–µ
                forum_manager.update_participants_list(training, [], topic_id, trainer_db)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—ã–≤—à–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
            notification = (
                "üîí –ó–∞–ø–∏—Å—å –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –∑–∞–∫—Ä—ã—Ç–∞:\n\n"
                f"üë• –ì—Ä—É–ø–ø–∞: {group[1]}\n"
                f"üìÖ –î–∞—Ç–∞: {training.date_time.strftime('%d.%m.%Y %H:%M')}\n"
                f"üèãÔ∏è‚Äç‚ôÇÔ∏è –¢–∏–ø: {training.kind}\n"
                f"üìç –ú–µ—Å—Ç–æ: {training.location}\n\n"
                "–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ—á–∏—â–µ–Ω. –ü—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∑–∞–ø–∏—Å–∏ –≤–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ."
            )
            
            for username in participants:
                if user_id := admin_db.get_user_id(username):
                    try:
                        bot.send_message(user_id, notification)
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username}: {e}")
            
            bot.send_message(call.from_user.id, "‚úÖ –ó–∞–ø–∏—Å—å –∑–∞–∫—Ä—ã—Ç–∞, —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ—á–∏—â–µ–Ω")
            bot.delete_message(call.message.chat.id, call.message.message_id)
            
        except Exception as e:
            print(f"Error in close_training: {e}")
            bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∑–∞–ø–∏—Å–∏")

    def process_participant_removal(message: Message, training_id: int, username: str):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
        reason = message.text.strip()
        if not reason:
            bot.reply_to(message, "‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É —É–¥–∞–ª–µ–Ω–∏—è")
            return
        
        admin_username = message.from_user.username
        trainer_db = TrainerDB(admin_username)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ
        training = trainer_db.get_training_details(training_id)
        if not training:
            bot.reply_to(message, "‚ùå –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
        group = channel_db.get_channel(training.channel_id)
        if not group:
            bot.reply_to(message, "‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –£–¥–∞–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
        if trainer_db.remove_participant(username, training_id):
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–Ω–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É
            if user_id := admin_db.get_user_id(username):
                notification = (
                    "‚ùå –í—ã –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:\n\n"
                    f"üë• –ì—Ä—É–ø–ø–∞: {group[1]}\n"
                    f"üìÖ –î–∞—Ç–∞: {training.date_time.strftime('%d.%m.%Y %H:%M')}\n"
                    f"üèãÔ∏è‚Äç‚ôÇÔ∏è –¢–∏–ø: {training.kind}\n"
                    f"üìç –ú–µ—Å—Ç–æ: {training.location}\n\n"
                    f"–ü—Ä–∏—á–∏–Ω–∞: {reason}"
                )
                try:
                    bot.send_message(user_id, notification)
                except Exception as e:
                    print(f"Error notifying user {username}: {e}")
            
            bot.reply_to(message, f"‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫ @{username} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤ —Ñ–æ—Ä—É–º–µ
            if topic_id := trainer_db.get_topic_id(training_id):
                participants = trainer_db.get_participants_by_training_id(training_id)
                forum_manager.update_participants_list(training, participants, topic_id, trainer_db)
        else:
            bot.reply_to(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞")

    @bot.message_handler(commands=['give_auto_signup'])
    def give_auto_signup(message: Message):
        """–ù–∞—á–∏—Å–ª—è–µ—Ç –∞–≤—Ç–æ–∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        if message.from_user.username != SUPERADMIN_USERNAME:
            bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
            return
            
        args = message.text.split()
        if len(args) != 3:
            bot.reply_to(message, "‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /give_auto_signup @username –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")
            return
            
        username = args[1].lstrip('@')
        try:
            amount = int(args[2])
            if amount <= 0:
                bot.reply_to(message, "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
                return
        except ValueError:
            bot.reply_to(message, "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            return
            
        # –°–æ–∑–¥–∞–µ–º TrainerDB –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –Ω–∞—á–∏—Å–ª—è–µ–º –∞–≤—Ç–æ–∑–∞–ø–∏—Å–∏
        user_db = TrainerDB(username)
        if user_db.add_auto_signups(username, amount):
            new_balance = user_db.get_auto_signups_balance(username)
            bot.reply_to(
                message, 
                f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{username} –Ω–∞—á–∏—Å–ª–µ–Ω–æ {amount} –∞–≤—Ç–æ–∑–∞–ø–∏—Å–µ–π\n"
                f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {new_balance}"
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_id := admin_db.get_user_id(username):
                notification = f"üéÅ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {amount} –∞–≤—Ç–æ–∑–∞–ø–∏—Å–µ–π!\n–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {new_balance}"
                try:
                    bot.send_message(user_id, notification)
                except Exception as e:
                    print(f"Error notifying user about auto signups: {e}")
        else:
            bot.reply_to(message, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∏—Å–ª–∏—Ç—å –∞–≤—Ç–æ–∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{username}")

    @bot.message_handler(commands=["init"])
    def init_channel(message: Message):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —á–∞—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–µ
        if message.chat.type != 'supergroup':
            bot.reply_to(message, "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –≤ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–µ —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ —Ç–µ–º–∞–º–∏")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ —Ç–µ–º—ã –≤ —á–∞—Ç–µ
        chat_info = bot.get_chat(message.chat.id)
        if not chat_info.is_forum:
            bot.reply_to(
                message, 
                "‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ –≤–∫–ª—é—á–µ–Ω—ã —Ç–µ–º—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∫–ª—é—á–∏—Ç–µ —Ç–µ–º—ã –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –≥—Ä—É–ø–ø—ã"
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        chat_member = bot.get_chat_member(message.chat.id, message.from_user.id)
        if chat_member.status not in ['creator', 'administrator']:
            bot.reply_to(message, "‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≥—Ä—É–ø–ø—ã –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ —á–∞—Ç —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
        if channel_db.channel_exists(message.chat.id):
            bot.reply_to(message, "‚ùå –≠—Ç–æ—Ç —á–∞—Ç —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return

        # –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Ç –≤ –±–∞–∑—É
        chat_title = message.chat.title or f"Group {message.chat.id}"
        if channel_db.add_channel(message.chat.id, chat_title):
            bot.reply_to(
                message,
                "‚úÖ –ß–∞—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!\n"
                "–¢–µ–ø–µ—Ä—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏"
            )
        else:
            bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏")

    def process_auto_signups(trainer_db: TrainerDB, training: Training) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞–≤—Ç–æ–∑–∞–ø–∏—Å–∏ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –∞–≤—Ç–æ–∑–∞–ø–∏—Å—å
        auto_signup_users = trainer_db.get_auto_signup_requests(training.id)
        max_auto_slots = training.max_participants // 2
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
        group = channel_db.get_channel(training.channel_id)
        if not group:
            print(f"Error: group not found for training {training.id}")
            return
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–≤—Ç–æ–∑–∞–ø–∏—Å–∏
        for username in auto_signup_users[:max_auto_slots]:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø–∏—Å–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            if trainer_db.is_participant(username, training.id):
                continue
            
            # –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
            if trainer_db.add_participant(username, training.id):
                # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–≤—Ç–æ–∑–∞–ø–∏—Å–µ–π
                user_db = TrainerDB(username)
                user_db.decrease_auto_signups(username)
                
                # # –£–¥–∞–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∞–≤—Ç–æ–∑–∞–ø–∏—Å–∏
                # trainer_db.remove_auto_signup_request(username, training.id)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                if user_id := admin_db.get_user_id(username):
                    notification = (
                        "‚úÖ –°—Ä–∞–±–æ—Ç–∞–ª–∞ –∞–≤—Ç–æ–∑–∞–ø–∏—Å—å!\n\n"
                        f"üë• –ì—Ä—É–ø–ø–∞: {group[1]}\n"
                        f"üìÖ –î–∞—Ç–∞: {training.date_time.strftime('%d.%m.%Y %H:%M')}\n"
                        f"üèãÔ∏è‚Äç‚ôÇÔ∏è –¢–∏–ø: {training.kind}\n"
                        f"üìç –ú–µ—Å—Ç–æ: {training.location}\n"
                        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {training.price}‚ÇΩ"
                    )
                    try:
                        bot.send_message(user_id, notification)
                    except Exception as e:
                        print(f"Error notifying user {username}: {e}")

    @bot.message_handler(commands=["set_payment_details"])
    def set_payment_details(message: Message):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã"""
        username = message.from_user.username
        if not admin_db.is_admin(username):
            bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
            
        # –ü–æ–ª—É—á–∞–µ–º channel_id –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        channel_id = admin_db.get_admin_channel(username)
        if not channel_id:
            bot.reply_to(message, "‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –Ω–∏ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø—ã")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
        group = channel_db.get_channel(channel_id)
        if not group:
            bot.reply_to(message, "‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
        details = message.text.replace("/set_payment_details", "").strip()
        if not details:
            bot.reply_to(message, "‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_payment_details <—Ä–µ–∫–≤–∏–∑–∏—Ç—ã>")
            return
        
        admin_db.set_payment_details(username, details)
        bot.reply_to(
            message, 
            f"‚úÖ –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –≥—Ä—É–ø–ø—ã {group[1]} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:\n\n{details}"
        )

    @bot.callback_query_handler(func=lambda call: call.data.startswith("reject_payment_"))
    def reject_payment(call: CallbackQuery):
        """–û—Ç–∫–ª–æ–Ω—è–µ—Ç –æ–ø–ª–∞—Ç—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
        try:
            parts = call.data.split("_")
            training_id = int(parts[2])
            username = parts[3]
            
            trainer_db = TrainerDB(call.from_user.username)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ
            training = trainer_db.get_training_details(training_id)
            if not training:
                bot.answer_callback_query(call.id, "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
            group = channel_db.get_channel(training.channel_id)
            if not group:
                bot.answer_callback_query(call.id, "–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
            
            # –û—Ç–∫–ª–æ–Ω—è–µ–º –æ–ø–ª–∞—Ç—É (—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å 0 - –Ω–µ –æ–ø–ª–∞—á–µ–Ω–æ)
            if trainer_db.set_payment_status(username, training_id, 0):
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                if user_id := admin_db.get_user_id(username):
                    notification = (
                        "‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\n"
                        f"üë• –ì—Ä—É–ø–ø–∞: {group[1]}\n"
                        f"üìÖ –î–∞—Ç–∞: {training.date_time.strftime('%d.%m.%Y %H:%M')}\n"
                        f"üèãÔ∏è‚Äç‚ôÇÔ∏è –¢–∏–ø: {training.kind}\n"
                        f"üìç –ú–µ—Å—Ç–æ: {training.location}\n\n"
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ–ø–ª–∞—Ç—ã –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç"
                    )
                    try:
                        bot.send_message(user_id, notification)
                    except Exception as e:
                        print(f"Error notifying user {username}: {e}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤ —Ñ–æ—Ä—É–º–µ
                if topic_id := trainer_db.get_topic_id(training_id):
                    participants = trainer_db.get_participants_by_training_id(training_id)
                    forum_manager.update_participants_list(training, participants, topic_id, trainer_db)
                
                bot.answer_callback_query(call.id, "‚ùå –û–ø–ª–∞—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")
                bot.delete_message(call.message.chat.id, call.message.message_id)
            else:
                bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã")
        
        except Exception as e:
            print(f"Error in reject_payment: {e}")
            bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã")
